// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mult_constant.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mult_constant::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mult_constant::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> mult_constant::ap_ST_fsm_state1 = "1";
const sc_lv<4> mult_constant::ap_ST_fsm_state2 = "10";
const sc_lv<4> mult_constant::ap_ST_fsm_state3 = "100";
const sc_lv<4> mult_constant::ap_ST_fsm_state4 = "1000";
const sc_lv<1> mult_constant::ap_const_lv1_0 = "0";
const sc_lv<1> mult_constant::ap_const_lv1_1 = "1";
const sc_lv<2> mult_constant::ap_const_lv2_0 = "00";
const sc_lv<2> mult_constant::ap_const_lv2_2 = "10";
const sc_lv<2> mult_constant::ap_const_lv2_3 = "11";
const sc_lv<2> mult_constant::ap_const_lv2_1 = "1";
const sc_lv<32> mult_constant::ap_const_lv32_1 = "1";
const sc_lv<32> mult_constant::ap_const_lv32_2 = "10";
const sc_lv<32> mult_constant::ap_const_lv32_3 = "11";
const int mult_constant::C_S_AXI_DATA_WIDTH = "100000";
const bool mult_constant::ap_const_boolean_1 = true;

mult_constant::mult_constant(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mult_constant_AXILiteS_s_axi_U = new mult_constant_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("mult_constant_AXILiteS_s_axi_U");
    mult_constant_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    mult_constant_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    mult_constant_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    mult_constant_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    mult_constant_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    mult_constant_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    mult_constant_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    mult_constant_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    mult_constant_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    mult_constant_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    mult_constant_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    mult_constant_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    mult_constant_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    mult_constant_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    mult_constant_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    mult_constant_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    mult_constant_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    mult_constant_AXILiteS_s_axi_U->ACLK(ap_clk);
    mult_constant_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    mult_constant_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    mult_constant_AXILiteS_s_axi_U->constant_V(constant_V);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( out_data_data_V_1_ack_in );
    sensitive << ( out_data_keep_V_1_ack_in );
    sensitive << ( out_data_strb_V_1_ack_in );
    sensitive << ( out_data_user_V_1_ack_in );
    sensitive << ( out_data_last_V_1_ack_in );
    sensitive << ( out_data_id_V_1_ack_in );
    sensitive << ( out_data_dest_V_1_ack_in );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_constant_V_0_ack_out);
    sensitive << ( out_data_data_V_1_ack_in );
    sensitive << ( out_data_keep_V_1_ack_in );
    sensitive << ( out_data_strb_V_1_ack_in );
    sensitive << ( out_data_user_V_1_ack_in );
    sensitive << ( out_data_last_V_1_ack_in );
    sensitive << ( out_data_id_V_1_ack_in );
    sensitive << ( out_data_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_data_TDATA_blk_n);
    sensitive << ( in_data_data_V_0_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_data_TREADY);
    sensitive << ( in_data_dest_V_0_state );

    SC_METHOD(thread_in_data_data_V_0_ack_in);
    sensitive << ( in_data_data_V_0_state );

    SC_METHOD(thread_in_data_data_V_0_ack_out);
    sensitive << ( in_data_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_data_data_V_0_data_out);
    sensitive << ( in_data_data_V_0_payload_A );
    sensitive << ( in_data_data_V_0_payload_B );
    sensitive << ( in_data_data_V_0_sel );

    SC_METHOD(thread_in_data_data_V_0_load_A);
    sensitive << ( in_data_data_V_0_sel_wr );
    sensitive << ( in_data_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_data_V_0_load_B);
    sensitive << ( in_data_data_V_0_sel_wr );
    sensitive << ( in_data_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_data_V_0_sel);
    sensitive << ( in_data_data_V_0_sel_rd );

    SC_METHOD(thread_in_data_data_V_0_state_cmp_full);
    sensitive << ( in_data_data_V_0_state );

    SC_METHOD(thread_in_data_data_V_0_vld_in);
    sensitive << ( in_data_TVALID );

    SC_METHOD(thread_in_data_data_V_0_vld_out);
    sensitive << ( in_data_data_V_0_state );

    SC_METHOD(thread_in_data_dest_V_0_ack_in);
    sensitive << ( in_data_dest_V_0_state );

    SC_METHOD(thread_in_data_dest_V_0_ack_out);
    sensitive << ( in_data_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_data_dest_V_0_data_out);
    sensitive << ( in_data_dest_V_0_payload_A );
    sensitive << ( in_data_dest_V_0_payload_B );
    sensitive << ( in_data_dest_V_0_sel );

    SC_METHOD(thread_in_data_dest_V_0_load_A);
    sensitive << ( in_data_dest_V_0_sel_wr );
    sensitive << ( in_data_dest_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_dest_V_0_load_B);
    sensitive << ( in_data_dest_V_0_sel_wr );
    sensitive << ( in_data_dest_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_dest_V_0_sel);
    sensitive << ( in_data_dest_V_0_sel_rd );

    SC_METHOD(thread_in_data_dest_V_0_state_cmp_full);
    sensitive << ( in_data_dest_V_0_state );

    SC_METHOD(thread_in_data_dest_V_0_vld_in);
    sensitive << ( in_data_TVALID );

    SC_METHOD(thread_in_data_dest_V_0_vld_out);
    sensitive << ( in_data_dest_V_0_state );

    SC_METHOD(thread_in_data_id_V_0_ack_in);
    sensitive << ( in_data_id_V_0_state );

    SC_METHOD(thread_in_data_id_V_0_ack_out);
    sensitive << ( in_data_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_data_id_V_0_data_out);
    sensitive << ( in_data_id_V_0_payload_A );
    sensitive << ( in_data_id_V_0_payload_B );
    sensitive << ( in_data_id_V_0_sel );

    SC_METHOD(thread_in_data_id_V_0_load_A);
    sensitive << ( in_data_id_V_0_sel_wr );
    sensitive << ( in_data_id_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_id_V_0_load_B);
    sensitive << ( in_data_id_V_0_sel_wr );
    sensitive << ( in_data_id_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_id_V_0_sel);
    sensitive << ( in_data_id_V_0_sel_rd );

    SC_METHOD(thread_in_data_id_V_0_state_cmp_full);
    sensitive << ( in_data_id_V_0_state );

    SC_METHOD(thread_in_data_id_V_0_vld_in);
    sensitive << ( in_data_TVALID );

    SC_METHOD(thread_in_data_id_V_0_vld_out);
    sensitive << ( in_data_id_V_0_state );

    SC_METHOD(thread_in_data_keep_V_0_ack_in);
    sensitive << ( in_data_keep_V_0_state );

    SC_METHOD(thread_in_data_keep_V_0_ack_out);
    sensitive << ( in_data_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_data_keep_V_0_data_out);
    sensitive << ( in_data_keep_V_0_payload_A );
    sensitive << ( in_data_keep_V_0_payload_B );
    sensitive << ( in_data_keep_V_0_sel );

    SC_METHOD(thread_in_data_keep_V_0_load_A);
    sensitive << ( in_data_keep_V_0_sel_wr );
    sensitive << ( in_data_keep_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_keep_V_0_load_B);
    sensitive << ( in_data_keep_V_0_sel_wr );
    sensitive << ( in_data_keep_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_keep_V_0_sel);
    sensitive << ( in_data_keep_V_0_sel_rd );

    SC_METHOD(thread_in_data_keep_V_0_state_cmp_full);
    sensitive << ( in_data_keep_V_0_state );

    SC_METHOD(thread_in_data_keep_V_0_vld_in);
    sensitive << ( in_data_TVALID );

    SC_METHOD(thread_in_data_keep_V_0_vld_out);
    sensitive << ( in_data_keep_V_0_state );

    SC_METHOD(thread_in_data_last_V_0_ack_in);
    sensitive << ( in_data_last_V_0_state );

    SC_METHOD(thread_in_data_last_V_0_ack_out);
    sensitive << ( in_data_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_data_last_V_0_data_out);
    sensitive << ( in_data_last_V_0_payload_A );
    sensitive << ( in_data_last_V_0_payload_B );
    sensitive << ( in_data_last_V_0_sel );

    SC_METHOD(thread_in_data_last_V_0_load_A);
    sensitive << ( in_data_last_V_0_sel_wr );
    sensitive << ( in_data_last_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_last_V_0_load_B);
    sensitive << ( in_data_last_V_0_sel_wr );
    sensitive << ( in_data_last_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_last_V_0_sel);
    sensitive << ( in_data_last_V_0_sel_rd );

    SC_METHOD(thread_in_data_last_V_0_state_cmp_full);
    sensitive << ( in_data_last_V_0_state );

    SC_METHOD(thread_in_data_last_V_0_vld_in);
    sensitive << ( in_data_TVALID );

    SC_METHOD(thread_in_data_last_V_0_vld_out);
    sensitive << ( in_data_last_V_0_state );

    SC_METHOD(thread_in_data_strb_V_0_ack_in);
    sensitive << ( in_data_strb_V_0_state );

    SC_METHOD(thread_in_data_strb_V_0_ack_out);
    sensitive << ( in_data_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_data_strb_V_0_data_out);
    sensitive << ( in_data_strb_V_0_payload_A );
    sensitive << ( in_data_strb_V_0_payload_B );
    sensitive << ( in_data_strb_V_0_sel );

    SC_METHOD(thread_in_data_strb_V_0_load_A);
    sensitive << ( in_data_strb_V_0_sel_wr );
    sensitive << ( in_data_strb_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_strb_V_0_load_B);
    sensitive << ( in_data_strb_V_0_sel_wr );
    sensitive << ( in_data_strb_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_strb_V_0_sel);
    sensitive << ( in_data_strb_V_0_sel_rd );

    SC_METHOD(thread_in_data_strb_V_0_state_cmp_full);
    sensitive << ( in_data_strb_V_0_state );

    SC_METHOD(thread_in_data_strb_V_0_vld_in);
    sensitive << ( in_data_TVALID );

    SC_METHOD(thread_in_data_strb_V_0_vld_out);
    sensitive << ( in_data_strb_V_0_state );

    SC_METHOD(thread_in_data_user_V_0_ack_in);
    sensitive << ( in_data_user_V_0_state );

    SC_METHOD(thread_in_data_user_V_0_ack_out);
    sensitive << ( in_data_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_data_user_V_0_data_out);
    sensitive << ( in_data_user_V_0_payload_A );
    sensitive << ( in_data_user_V_0_payload_B );
    sensitive << ( in_data_user_V_0_sel );

    SC_METHOD(thread_in_data_user_V_0_load_A);
    sensitive << ( in_data_user_V_0_sel_wr );
    sensitive << ( in_data_user_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_user_V_0_load_B);
    sensitive << ( in_data_user_V_0_sel_wr );
    sensitive << ( in_data_user_V_0_state_cmp_full );

    SC_METHOD(thread_in_data_user_V_0_sel);
    sensitive << ( in_data_user_V_0_sel_rd );

    SC_METHOD(thread_in_data_user_V_0_state_cmp_full);
    sensitive << ( in_data_user_V_0_state );

    SC_METHOD(thread_in_data_user_V_0_vld_in);
    sensitive << ( in_data_TVALID );

    SC_METHOD(thread_in_data_user_V_0_vld_out);
    sensitive << ( in_data_user_V_0_state );

    SC_METHOD(thread_out_data_TDATA);
    sensitive << ( out_data_data_V_1_data_out );

    SC_METHOD(thread_out_data_TDATA_blk_n);
    sensitive << ( out_data_data_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_out_data_TDEST);
    sensitive << ( out_data_dest_V_1_data_out );

    SC_METHOD(thread_out_data_TID);
    sensitive << ( out_data_id_V_1_data_out );

    SC_METHOD(thread_out_data_TKEEP);
    sensitive << ( out_data_keep_V_1_data_out );

    SC_METHOD(thread_out_data_TLAST);
    sensitive << ( out_data_last_V_1_data_out );

    SC_METHOD(thread_out_data_TSTRB);
    sensitive << ( out_data_strb_V_1_data_out );

    SC_METHOD(thread_out_data_TUSER);
    sensitive << ( out_data_user_V_1_data_out );

    SC_METHOD(thread_out_data_TVALID);
    sensitive << ( out_data_dest_V_1_state );

    SC_METHOD(thread_out_data_data_V_1_ack_in);
    sensitive << ( out_data_data_V_1_state );

    SC_METHOD(thread_out_data_data_V_1_ack_out);
    sensitive << ( out_data_TREADY );

    SC_METHOD(thread_out_data_data_V_1_data_out);
    sensitive << ( out_data_data_V_1_payload_A );
    sensitive << ( out_data_data_V_1_payload_B );
    sensitive << ( out_data_data_V_1_sel );

    SC_METHOD(thread_out_data_data_V_1_load_A);
    sensitive << ( out_data_data_V_1_sel_wr );
    sensitive << ( out_data_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_data_V_1_load_B);
    sensitive << ( out_data_data_V_1_sel_wr );
    sensitive << ( out_data_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_data_V_1_sel);
    sensitive << ( out_data_data_V_1_sel_rd );

    SC_METHOD(thread_out_data_data_V_1_state_cmp_full);
    sensitive << ( out_data_data_V_1_state );

    SC_METHOD(thread_out_data_data_V_1_vld_in);
    sensitive << ( out_data_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_data_data_V_1_vld_out);
    sensitive << ( out_data_data_V_1_state );

    SC_METHOD(thread_out_data_data_V_tmp_fu_135_p2);
    sensitive << ( constant_V_read_reg_140 );
    sensitive << ( in_data_data_V_tmp_reg_145 );

    SC_METHOD(thread_out_data_dest_V_1_ack_in);
    sensitive << ( out_data_dest_V_1_state );

    SC_METHOD(thread_out_data_dest_V_1_ack_out);
    sensitive << ( out_data_TREADY );

    SC_METHOD(thread_out_data_dest_V_1_data_out);
    sensitive << ( out_data_dest_V_1_payload_A );
    sensitive << ( out_data_dest_V_1_payload_B );
    sensitive << ( out_data_dest_V_1_sel );

    SC_METHOD(thread_out_data_dest_V_1_load_A);
    sensitive << ( out_data_dest_V_1_sel_wr );
    sensitive << ( out_data_dest_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_dest_V_1_load_B);
    sensitive << ( out_data_dest_V_1_sel_wr );
    sensitive << ( out_data_dest_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_dest_V_1_sel);
    sensitive << ( out_data_dest_V_1_sel_rd );

    SC_METHOD(thread_out_data_dest_V_1_state_cmp_full);
    sensitive << ( out_data_dest_V_1_state );

    SC_METHOD(thread_out_data_dest_V_1_vld_in);
    sensitive << ( out_data_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_data_dest_V_1_vld_out);
    sensitive << ( out_data_dest_V_1_state );

    SC_METHOD(thread_out_data_id_V_1_ack_in);
    sensitive << ( out_data_id_V_1_state );

    SC_METHOD(thread_out_data_id_V_1_ack_out);
    sensitive << ( out_data_TREADY );

    SC_METHOD(thread_out_data_id_V_1_data_out);
    sensitive << ( out_data_id_V_1_payload_A );
    sensitive << ( out_data_id_V_1_payload_B );
    sensitive << ( out_data_id_V_1_sel );

    SC_METHOD(thread_out_data_id_V_1_load_A);
    sensitive << ( out_data_id_V_1_sel_wr );
    sensitive << ( out_data_id_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_id_V_1_load_B);
    sensitive << ( out_data_id_V_1_sel_wr );
    sensitive << ( out_data_id_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_id_V_1_sel);
    sensitive << ( out_data_id_V_1_sel_rd );

    SC_METHOD(thread_out_data_id_V_1_state_cmp_full);
    sensitive << ( out_data_id_V_1_state );

    SC_METHOD(thread_out_data_id_V_1_vld_in);
    sensitive << ( out_data_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_data_id_V_1_vld_out);
    sensitive << ( out_data_id_V_1_state );

    SC_METHOD(thread_out_data_keep_V_1_ack_in);
    sensitive << ( out_data_keep_V_1_state );

    SC_METHOD(thread_out_data_keep_V_1_ack_out);
    sensitive << ( out_data_TREADY );

    SC_METHOD(thread_out_data_keep_V_1_data_out);
    sensitive << ( out_data_keep_V_1_payload_A );
    sensitive << ( out_data_keep_V_1_payload_B );
    sensitive << ( out_data_keep_V_1_sel );

    SC_METHOD(thread_out_data_keep_V_1_load_A);
    sensitive << ( out_data_keep_V_1_sel_wr );
    sensitive << ( out_data_keep_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_keep_V_1_load_B);
    sensitive << ( out_data_keep_V_1_sel_wr );
    sensitive << ( out_data_keep_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_keep_V_1_sel);
    sensitive << ( out_data_keep_V_1_sel_rd );

    SC_METHOD(thread_out_data_keep_V_1_state_cmp_full);
    sensitive << ( out_data_keep_V_1_state );

    SC_METHOD(thread_out_data_keep_V_1_vld_in);
    sensitive << ( out_data_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_data_keep_V_1_vld_out);
    sensitive << ( out_data_keep_V_1_state );

    SC_METHOD(thread_out_data_last_V_1_ack_in);
    sensitive << ( out_data_last_V_1_state );

    SC_METHOD(thread_out_data_last_V_1_ack_out);
    sensitive << ( out_data_TREADY );

    SC_METHOD(thread_out_data_last_V_1_data_out);
    sensitive << ( out_data_last_V_1_payload_A );
    sensitive << ( out_data_last_V_1_payload_B );
    sensitive << ( out_data_last_V_1_sel );

    SC_METHOD(thread_out_data_last_V_1_load_A);
    sensitive << ( out_data_last_V_1_sel_wr );
    sensitive << ( out_data_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_last_V_1_load_B);
    sensitive << ( out_data_last_V_1_sel_wr );
    sensitive << ( out_data_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_last_V_1_sel);
    sensitive << ( out_data_last_V_1_sel_rd );

    SC_METHOD(thread_out_data_last_V_1_state_cmp_full);
    sensitive << ( out_data_last_V_1_state );

    SC_METHOD(thread_out_data_last_V_1_vld_in);
    sensitive << ( out_data_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_data_last_V_1_vld_out);
    sensitive << ( out_data_last_V_1_state );

    SC_METHOD(thread_out_data_strb_V_1_ack_in);
    sensitive << ( out_data_strb_V_1_state );

    SC_METHOD(thread_out_data_strb_V_1_ack_out);
    sensitive << ( out_data_TREADY );

    SC_METHOD(thread_out_data_strb_V_1_data_out);
    sensitive << ( out_data_strb_V_1_payload_A );
    sensitive << ( out_data_strb_V_1_payload_B );
    sensitive << ( out_data_strb_V_1_sel );

    SC_METHOD(thread_out_data_strb_V_1_load_A);
    sensitive << ( out_data_strb_V_1_sel_wr );
    sensitive << ( out_data_strb_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_strb_V_1_load_B);
    sensitive << ( out_data_strb_V_1_sel_wr );
    sensitive << ( out_data_strb_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_strb_V_1_sel);
    sensitive << ( out_data_strb_V_1_sel_rd );

    SC_METHOD(thread_out_data_strb_V_1_state_cmp_full);
    sensitive << ( out_data_strb_V_1_state );

    SC_METHOD(thread_out_data_strb_V_1_vld_in);
    sensitive << ( out_data_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_data_strb_V_1_vld_out);
    sensitive << ( out_data_strb_V_1_state );

    SC_METHOD(thread_out_data_user_V_1_ack_in);
    sensitive << ( out_data_user_V_1_state );

    SC_METHOD(thread_out_data_user_V_1_ack_out);
    sensitive << ( out_data_TREADY );

    SC_METHOD(thread_out_data_user_V_1_data_out);
    sensitive << ( out_data_user_V_1_payload_A );
    sensitive << ( out_data_user_V_1_payload_B );
    sensitive << ( out_data_user_V_1_sel );

    SC_METHOD(thread_out_data_user_V_1_load_A);
    sensitive << ( out_data_user_V_1_sel_wr );
    sensitive << ( out_data_user_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_user_V_1_load_B);
    sensitive << ( out_data_user_V_1_sel_wr );
    sensitive << ( out_data_user_V_1_state_cmp_full );

    SC_METHOD(thread_out_data_user_V_1_sel);
    sensitive << ( out_data_user_V_1_sel_rd );

    SC_METHOD(thread_out_data_user_V_1_state_cmp_full);
    sensitive << ( out_data_user_V_1_state );

    SC_METHOD(thread_out_data_user_V_1_vld_in);
    sensitive << ( out_data_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_data_user_V_1_vld_out);
    sensitive << ( out_data_user_V_1_state );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( in_data_data_V_0_vld_out );
    sensitive << ( out_data_data_V_1_ack_in );
    sensitive << ( out_data_keep_V_1_ack_in );
    sensitive << ( out_data_strb_V_1_ack_in );
    sensitive << ( out_data_user_V_1_ack_in );
    sensitive << ( out_data_last_V_1_ack_in );
    sensitive << ( out_data_id_V_1_ack_in );
    sensitive << ( out_data_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    in_data_data_V_0_sel_rd = SC_LOGIC_0;
    in_data_data_V_0_sel_wr = SC_LOGIC_0;
    in_data_data_V_0_state = "00";
    in_data_keep_V_0_sel_rd = SC_LOGIC_0;
    in_data_keep_V_0_sel_wr = SC_LOGIC_0;
    in_data_keep_V_0_state = "00";
    in_data_strb_V_0_sel_rd = SC_LOGIC_0;
    in_data_strb_V_0_sel_wr = SC_LOGIC_0;
    in_data_strb_V_0_state = "00";
    in_data_user_V_0_sel_rd = SC_LOGIC_0;
    in_data_user_V_0_sel_wr = SC_LOGIC_0;
    in_data_user_V_0_state = "00";
    in_data_last_V_0_sel_rd = SC_LOGIC_0;
    in_data_last_V_0_sel_wr = SC_LOGIC_0;
    in_data_last_V_0_state = "00";
    in_data_id_V_0_sel_rd = SC_LOGIC_0;
    in_data_id_V_0_sel_wr = SC_LOGIC_0;
    in_data_id_V_0_state = "00";
    in_data_dest_V_0_sel_rd = SC_LOGIC_0;
    in_data_dest_V_0_sel_wr = SC_LOGIC_0;
    in_data_dest_V_0_state = "00";
    out_data_data_V_1_sel_rd = SC_LOGIC_0;
    out_data_data_V_1_sel_wr = SC_LOGIC_0;
    out_data_data_V_1_state = "00";
    out_data_keep_V_1_sel_rd = SC_LOGIC_0;
    out_data_keep_V_1_sel_wr = SC_LOGIC_0;
    out_data_keep_V_1_state = "00";
    out_data_strb_V_1_sel_rd = SC_LOGIC_0;
    out_data_strb_V_1_sel_wr = SC_LOGIC_0;
    out_data_strb_V_1_state = "00";
    out_data_user_V_1_sel_rd = SC_LOGIC_0;
    out_data_user_V_1_sel_wr = SC_LOGIC_0;
    out_data_user_V_1_state = "00";
    out_data_last_V_1_sel_rd = SC_LOGIC_0;
    out_data_last_V_1_sel_wr = SC_LOGIC_0;
    out_data_last_V_1_state = "00";
    out_data_id_V_1_sel_rd = SC_LOGIC_0;
    out_data_id_V_1_sel_wr = SC_LOGIC_0;
    out_data_id_V_1_state = "00";
    out_data_dest_V_1_sel_rd = SC_LOGIC_0;
    out_data_dest_V_1_sel_wr = SC_LOGIC_0;
    out_data_dest_V_1_state = "00";
    constant_V_0_data_reg = "00000000000000000000000000000000";
    constant_V_0_vld_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mult_constant_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_data_TDATA, "(port)in_data_TDATA");
    sc_trace(mVcdFile, in_data_TVALID, "(port)in_data_TVALID");
    sc_trace(mVcdFile, in_data_TREADY, "(port)in_data_TREADY");
    sc_trace(mVcdFile, in_data_TKEEP, "(port)in_data_TKEEP");
    sc_trace(mVcdFile, in_data_TSTRB, "(port)in_data_TSTRB");
    sc_trace(mVcdFile, in_data_TUSER, "(port)in_data_TUSER");
    sc_trace(mVcdFile, in_data_TLAST, "(port)in_data_TLAST");
    sc_trace(mVcdFile, in_data_TID, "(port)in_data_TID");
    sc_trace(mVcdFile, in_data_TDEST, "(port)in_data_TDEST");
    sc_trace(mVcdFile, out_data_TDATA, "(port)out_data_TDATA");
    sc_trace(mVcdFile, out_data_TVALID, "(port)out_data_TVALID");
    sc_trace(mVcdFile, out_data_TREADY, "(port)out_data_TREADY");
    sc_trace(mVcdFile, out_data_TKEEP, "(port)out_data_TKEEP");
    sc_trace(mVcdFile, out_data_TSTRB, "(port)out_data_TSTRB");
    sc_trace(mVcdFile, out_data_TUSER, "(port)out_data_TUSER");
    sc_trace(mVcdFile, out_data_TLAST, "(port)out_data_TLAST");
    sc_trace(mVcdFile, out_data_TID, "(port)out_data_TID");
    sc_trace(mVcdFile, out_data_TDEST, "(port)out_data_TDEST");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, in_data_data_V_0_data_out, "in_data_data_V_0_data_out");
    sc_trace(mVcdFile, in_data_data_V_0_vld_in, "in_data_data_V_0_vld_in");
    sc_trace(mVcdFile, in_data_data_V_0_vld_out, "in_data_data_V_0_vld_out");
    sc_trace(mVcdFile, in_data_data_V_0_ack_in, "in_data_data_V_0_ack_in");
    sc_trace(mVcdFile, in_data_data_V_0_ack_out, "in_data_data_V_0_ack_out");
    sc_trace(mVcdFile, in_data_data_V_0_payload_A, "in_data_data_V_0_payload_A");
    sc_trace(mVcdFile, in_data_data_V_0_payload_B, "in_data_data_V_0_payload_B");
    sc_trace(mVcdFile, in_data_data_V_0_sel_rd, "in_data_data_V_0_sel_rd");
    sc_trace(mVcdFile, in_data_data_V_0_sel_wr, "in_data_data_V_0_sel_wr");
    sc_trace(mVcdFile, in_data_data_V_0_sel, "in_data_data_V_0_sel");
    sc_trace(mVcdFile, in_data_data_V_0_load_A, "in_data_data_V_0_load_A");
    sc_trace(mVcdFile, in_data_data_V_0_load_B, "in_data_data_V_0_load_B");
    sc_trace(mVcdFile, in_data_data_V_0_state, "in_data_data_V_0_state");
    sc_trace(mVcdFile, in_data_data_V_0_state_cmp_full, "in_data_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_data_keep_V_0_data_out, "in_data_keep_V_0_data_out");
    sc_trace(mVcdFile, in_data_keep_V_0_vld_in, "in_data_keep_V_0_vld_in");
    sc_trace(mVcdFile, in_data_keep_V_0_vld_out, "in_data_keep_V_0_vld_out");
    sc_trace(mVcdFile, in_data_keep_V_0_ack_in, "in_data_keep_V_0_ack_in");
    sc_trace(mVcdFile, in_data_keep_V_0_ack_out, "in_data_keep_V_0_ack_out");
    sc_trace(mVcdFile, in_data_keep_V_0_payload_A, "in_data_keep_V_0_payload_A");
    sc_trace(mVcdFile, in_data_keep_V_0_payload_B, "in_data_keep_V_0_payload_B");
    sc_trace(mVcdFile, in_data_keep_V_0_sel_rd, "in_data_keep_V_0_sel_rd");
    sc_trace(mVcdFile, in_data_keep_V_0_sel_wr, "in_data_keep_V_0_sel_wr");
    sc_trace(mVcdFile, in_data_keep_V_0_sel, "in_data_keep_V_0_sel");
    sc_trace(mVcdFile, in_data_keep_V_0_load_A, "in_data_keep_V_0_load_A");
    sc_trace(mVcdFile, in_data_keep_V_0_load_B, "in_data_keep_V_0_load_B");
    sc_trace(mVcdFile, in_data_keep_V_0_state, "in_data_keep_V_0_state");
    sc_trace(mVcdFile, in_data_keep_V_0_state_cmp_full, "in_data_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_data_strb_V_0_data_out, "in_data_strb_V_0_data_out");
    sc_trace(mVcdFile, in_data_strb_V_0_vld_in, "in_data_strb_V_0_vld_in");
    sc_trace(mVcdFile, in_data_strb_V_0_vld_out, "in_data_strb_V_0_vld_out");
    sc_trace(mVcdFile, in_data_strb_V_0_ack_in, "in_data_strb_V_0_ack_in");
    sc_trace(mVcdFile, in_data_strb_V_0_ack_out, "in_data_strb_V_0_ack_out");
    sc_trace(mVcdFile, in_data_strb_V_0_payload_A, "in_data_strb_V_0_payload_A");
    sc_trace(mVcdFile, in_data_strb_V_0_payload_B, "in_data_strb_V_0_payload_B");
    sc_trace(mVcdFile, in_data_strb_V_0_sel_rd, "in_data_strb_V_0_sel_rd");
    sc_trace(mVcdFile, in_data_strb_V_0_sel_wr, "in_data_strb_V_0_sel_wr");
    sc_trace(mVcdFile, in_data_strb_V_0_sel, "in_data_strb_V_0_sel");
    sc_trace(mVcdFile, in_data_strb_V_0_load_A, "in_data_strb_V_0_load_A");
    sc_trace(mVcdFile, in_data_strb_V_0_load_B, "in_data_strb_V_0_load_B");
    sc_trace(mVcdFile, in_data_strb_V_0_state, "in_data_strb_V_0_state");
    sc_trace(mVcdFile, in_data_strb_V_0_state_cmp_full, "in_data_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_data_user_V_0_data_out, "in_data_user_V_0_data_out");
    sc_trace(mVcdFile, in_data_user_V_0_vld_in, "in_data_user_V_0_vld_in");
    sc_trace(mVcdFile, in_data_user_V_0_vld_out, "in_data_user_V_0_vld_out");
    sc_trace(mVcdFile, in_data_user_V_0_ack_in, "in_data_user_V_0_ack_in");
    sc_trace(mVcdFile, in_data_user_V_0_ack_out, "in_data_user_V_0_ack_out");
    sc_trace(mVcdFile, in_data_user_V_0_payload_A, "in_data_user_V_0_payload_A");
    sc_trace(mVcdFile, in_data_user_V_0_payload_B, "in_data_user_V_0_payload_B");
    sc_trace(mVcdFile, in_data_user_V_0_sel_rd, "in_data_user_V_0_sel_rd");
    sc_trace(mVcdFile, in_data_user_V_0_sel_wr, "in_data_user_V_0_sel_wr");
    sc_trace(mVcdFile, in_data_user_V_0_sel, "in_data_user_V_0_sel");
    sc_trace(mVcdFile, in_data_user_V_0_load_A, "in_data_user_V_0_load_A");
    sc_trace(mVcdFile, in_data_user_V_0_load_B, "in_data_user_V_0_load_B");
    sc_trace(mVcdFile, in_data_user_V_0_state, "in_data_user_V_0_state");
    sc_trace(mVcdFile, in_data_user_V_0_state_cmp_full, "in_data_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_data_last_V_0_data_out, "in_data_last_V_0_data_out");
    sc_trace(mVcdFile, in_data_last_V_0_vld_in, "in_data_last_V_0_vld_in");
    sc_trace(mVcdFile, in_data_last_V_0_vld_out, "in_data_last_V_0_vld_out");
    sc_trace(mVcdFile, in_data_last_V_0_ack_in, "in_data_last_V_0_ack_in");
    sc_trace(mVcdFile, in_data_last_V_0_ack_out, "in_data_last_V_0_ack_out");
    sc_trace(mVcdFile, in_data_last_V_0_payload_A, "in_data_last_V_0_payload_A");
    sc_trace(mVcdFile, in_data_last_V_0_payload_B, "in_data_last_V_0_payload_B");
    sc_trace(mVcdFile, in_data_last_V_0_sel_rd, "in_data_last_V_0_sel_rd");
    sc_trace(mVcdFile, in_data_last_V_0_sel_wr, "in_data_last_V_0_sel_wr");
    sc_trace(mVcdFile, in_data_last_V_0_sel, "in_data_last_V_0_sel");
    sc_trace(mVcdFile, in_data_last_V_0_load_A, "in_data_last_V_0_load_A");
    sc_trace(mVcdFile, in_data_last_V_0_load_B, "in_data_last_V_0_load_B");
    sc_trace(mVcdFile, in_data_last_V_0_state, "in_data_last_V_0_state");
    sc_trace(mVcdFile, in_data_last_V_0_state_cmp_full, "in_data_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_data_id_V_0_data_out, "in_data_id_V_0_data_out");
    sc_trace(mVcdFile, in_data_id_V_0_vld_in, "in_data_id_V_0_vld_in");
    sc_trace(mVcdFile, in_data_id_V_0_vld_out, "in_data_id_V_0_vld_out");
    sc_trace(mVcdFile, in_data_id_V_0_ack_in, "in_data_id_V_0_ack_in");
    sc_trace(mVcdFile, in_data_id_V_0_ack_out, "in_data_id_V_0_ack_out");
    sc_trace(mVcdFile, in_data_id_V_0_payload_A, "in_data_id_V_0_payload_A");
    sc_trace(mVcdFile, in_data_id_V_0_payload_B, "in_data_id_V_0_payload_B");
    sc_trace(mVcdFile, in_data_id_V_0_sel_rd, "in_data_id_V_0_sel_rd");
    sc_trace(mVcdFile, in_data_id_V_0_sel_wr, "in_data_id_V_0_sel_wr");
    sc_trace(mVcdFile, in_data_id_V_0_sel, "in_data_id_V_0_sel");
    sc_trace(mVcdFile, in_data_id_V_0_load_A, "in_data_id_V_0_load_A");
    sc_trace(mVcdFile, in_data_id_V_0_load_B, "in_data_id_V_0_load_B");
    sc_trace(mVcdFile, in_data_id_V_0_state, "in_data_id_V_0_state");
    sc_trace(mVcdFile, in_data_id_V_0_state_cmp_full, "in_data_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_data_dest_V_0_data_out, "in_data_dest_V_0_data_out");
    sc_trace(mVcdFile, in_data_dest_V_0_vld_in, "in_data_dest_V_0_vld_in");
    sc_trace(mVcdFile, in_data_dest_V_0_vld_out, "in_data_dest_V_0_vld_out");
    sc_trace(mVcdFile, in_data_dest_V_0_ack_in, "in_data_dest_V_0_ack_in");
    sc_trace(mVcdFile, in_data_dest_V_0_ack_out, "in_data_dest_V_0_ack_out");
    sc_trace(mVcdFile, in_data_dest_V_0_payload_A, "in_data_dest_V_0_payload_A");
    sc_trace(mVcdFile, in_data_dest_V_0_payload_B, "in_data_dest_V_0_payload_B");
    sc_trace(mVcdFile, in_data_dest_V_0_sel_rd, "in_data_dest_V_0_sel_rd");
    sc_trace(mVcdFile, in_data_dest_V_0_sel_wr, "in_data_dest_V_0_sel_wr");
    sc_trace(mVcdFile, in_data_dest_V_0_sel, "in_data_dest_V_0_sel");
    sc_trace(mVcdFile, in_data_dest_V_0_load_A, "in_data_dest_V_0_load_A");
    sc_trace(mVcdFile, in_data_dest_V_0_load_B, "in_data_dest_V_0_load_B");
    sc_trace(mVcdFile, in_data_dest_V_0_state, "in_data_dest_V_0_state");
    sc_trace(mVcdFile, in_data_dest_V_0_state_cmp_full, "in_data_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, out_data_data_V_1_data_out, "out_data_data_V_1_data_out");
    sc_trace(mVcdFile, out_data_data_V_1_vld_in, "out_data_data_V_1_vld_in");
    sc_trace(mVcdFile, out_data_data_V_1_vld_out, "out_data_data_V_1_vld_out");
    sc_trace(mVcdFile, out_data_data_V_1_ack_in, "out_data_data_V_1_ack_in");
    sc_trace(mVcdFile, out_data_data_V_1_ack_out, "out_data_data_V_1_ack_out");
    sc_trace(mVcdFile, out_data_data_V_1_payload_A, "out_data_data_V_1_payload_A");
    sc_trace(mVcdFile, out_data_data_V_1_payload_B, "out_data_data_V_1_payload_B");
    sc_trace(mVcdFile, out_data_data_V_1_sel_rd, "out_data_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_data_data_V_1_sel_wr, "out_data_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_data_data_V_1_sel, "out_data_data_V_1_sel");
    sc_trace(mVcdFile, out_data_data_V_1_load_A, "out_data_data_V_1_load_A");
    sc_trace(mVcdFile, out_data_data_V_1_load_B, "out_data_data_V_1_load_B");
    sc_trace(mVcdFile, out_data_data_V_1_state, "out_data_data_V_1_state");
    sc_trace(mVcdFile, out_data_data_V_1_state_cmp_full, "out_data_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_data_keep_V_1_data_out, "out_data_keep_V_1_data_out");
    sc_trace(mVcdFile, out_data_keep_V_1_vld_in, "out_data_keep_V_1_vld_in");
    sc_trace(mVcdFile, out_data_keep_V_1_vld_out, "out_data_keep_V_1_vld_out");
    sc_trace(mVcdFile, out_data_keep_V_1_ack_in, "out_data_keep_V_1_ack_in");
    sc_trace(mVcdFile, out_data_keep_V_1_ack_out, "out_data_keep_V_1_ack_out");
    sc_trace(mVcdFile, out_data_keep_V_1_payload_A, "out_data_keep_V_1_payload_A");
    sc_trace(mVcdFile, out_data_keep_V_1_payload_B, "out_data_keep_V_1_payload_B");
    sc_trace(mVcdFile, out_data_keep_V_1_sel_rd, "out_data_keep_V_1_sel_rd");
    sc_trace(mVcdFile, out_data_keep_V_1_sel_wr, "out_data_keep_V_1_sel_wr");
    sc_trace(mVcdFile, out_data_keep_V_1_sel, "out_data_keep_V_1_sel");
    sc_trace(mVcdFile, out_data_keep_V_1_load_A, "out_data_keep_V_1_load_A");
    sc_trace(mVcdFile, out_data_keep_V_1_load_B, "out_data_keep_V_1_load_B");
    sc_trace(mVcdFile, out_data_keep_V_1_state, "out_data_keep_V_1_state");
    sc_trace(mVcdFile, out_data_keep_V_1_state_cmp_full, "out_data_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_data_strb_V_1_data_out, "out_data_strb_V_1_data_out");
    sc_trace(mVcdFile, out_data_strb_V_1_vld_in, "out_data_strb_V_1_vld_in");
    sc_trace(mVcdFile, out_data_strb_V_1_vld_out, "out_data_strb_V_1_vld_out");
    sc_trace(mVcdFile, out_data_strb_V_1_ack_in, "out_data_strb_V_1_ack_in");
    sc_trace(mVcdFile, out_data_strb_V_1_ack_out, "out_data_strb_V_1_ack_out");
    sc_trace(mVcdFile, out_data_strb_V_1_payload_A, "out_data_strb_V_1_payload_A");
    sc_trace(mVcdFile, out_data_strb_V_1_payload_B, "out_data_strb_V_1_payload_B");
    sc_trace(mVcdFile, out_data_strb_V_1_sel_rd, "out_data_strb_V_1_sel_rd");
    sc_trace(mVcdFile, out_data_strb_V_1_sel_wr, "out_data_strb_V_1_sel_wr");
    sc_trace(mVcdFile, out_data_strb_V_1_sel, "out_data_strb_V_1_sel");
    sc_trace(mVcdFile, out_data_strb_V_1_load_A, "out_data_strb_V_1_load_A");
    sc_trace(mVcdFile, out_data_strb_V_1_load_B, "out_data_strb_V_1_load_B");
    sc_trace(mVcdFile, out_data_strb_V_1_state, "out_data_strb_V_1_state");
    sc_trace(mVcdFile, out_data_strb_V_1_state_cmp_full, "out_data_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_data_user_V_1_data_out, "out_data_user_V_1_data_out");
    sc_trace(mVcdFile, out_data_user_V_1_vld_in, "out_data_user_V_1_vld_in");
    sc_trace(mVcdFile, out_data_user_V_1_vld_out, "out_data_user_V_1_vld_out");
    sc_trace(mVcdFile, out_data_user_V_1_ack_in, "out_data_user_V_1_ack_in");
    sc_trace(mVcdFile, out_data_user_V_1_ack_out, "out_data_user_V_1_ack_out");
    sc_trace(mVcdFile, out_data_user_V_1_payload_A, "out_data_user_V_1_payload_A");
    sc_trace(mVcdFile, out_data_user_V_1_payload_B, "out_data_user_V_1_payload_B");
    sc_trace(mVcdFile, out_data_user_V_1_sel_rd, "out_data_user_V_1_sel_rd");
    sc_trace(mVcdFile, out_data_user_V_1_sel_wr, "out_data_user_V_1_sel_wr");
    sc_trace(mVcdFile, out_data_user_V_1_sel, "out_data_user_V_1_sel");
    sc_trace(mVcdFile, out_data_user_V_1_load_A, "out_data_user_V_1_load_A");
    sc_trace(mVcdFile, out_data_user_V_1_load_B, "out_data_user_V_1_load_B");
    sc_trace(mVcdFile, out_data_user_V_1_state, "out_data_user_V_1_state");
    sc_trace(mVcdFile, out_data_user_V_1_state_cmp_full, "out_data_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_data_last_V_1_data_out, "out_data_last_V_1_data_out");
    sc_trace(mVcdFile, out_data_last_V_1_vld_in, "out_data_last_V_1_vld_in");
    sc_trace(mVcdFile, out_data_last_V_1_vld_out, "out_data_last_V_1_vld_out");
    sc_trace(mVcdFile, out_data_last_V_1_ack_in, "out_data_last_V_1_ack_in");
    sc_trace(mVcdFile, out_data_last_V_1_ack_out, "out_data_last_V_1_ack_out");
    sc_trace(mVcdFile, out_data_last_V_1_payload_A, "out_data_last_V_1_payload_A");
    sc_trace(mVcdFile, out_data_last_V_1_payload_B, "out_data_last_V_1_payload_B");
    sc_trace(mVcdFile, out_data_last_V_1_sel_rd, "out_data_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_data_last_V_1_sel_wr, "out_data_last_V_1_sel_wr");
    sc_trace(mVcdFile, out_data_last_V_1_sel, "out_data_last_V_1_sel");
    sc_trace(mVcdFile, out_data_last_V_1_load_A, "out_data_last_V_1_load_A");
    sc_trace(mVcdFile, out_data_last_V_1_load_B, "out_data_last_V_1_load_B");
    sc_trace(mVcdFile, out_data_last_V_1_state, "out_data_last_V_1_state");
    sc_trace(mVcdFile, out_data_last_V_1_state_cmp_full, "out_data_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_data_id_V_1_data_out, "out_data_id_V_1_data_out");
    sc_trace(mVcdFile, out_data_id_V_1_vld_in, "out_data_id_V_1_vld_in");
    sc_trace(mVcdFile, out_data_id_V_1_vld_out, "out_data_id_V_1_vld_out");
    sc_trace(mVcdFile, out_data_id_V_1_ack_in, "out_data_id_V_1_ack_in");
    sc_trace(mVcdFile, out_data_id_V_1_ack_out, "out_data_id_V_1_ack_out");
    sc_trace(mVcdFile, out_data_id_V_1_payload_A, "out_data_id_V_1_payload_A");
    sc_trace(mVcdFile, out_data_id_V_1_payload_B, "out_data_id_V_1_payload_B");
    sc_trace(mVcdFile, out_data_id_V_1_sel_rd, "out_data_id_V_1_sel_rd");
    sc_trace(mVcdFile, out_data_id_V_1_sel_wr, "out_data_id_V_1_sel_wr");
    sc_trace(mVcdFile, out_data_id_V_1_sel, "out_data_id_V_1_sel");
    sc_trace(mVcdFile, out_data_id_V_1_load_A, "out_data_id_V_1_load_A");
    sc_trace(mVcdFile, out_data_id_V_1_load_B, "out_data_id_V_1_load_B");
    sc_trace(mVcdFile, out_data_id_V_1_state, "out_data_id_V_1_state");
    sc_trace(mVcdFile, out_data_id_V_1_state_cmp_full, "out_data_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_data_dest_V_1_data_out, "out_data_dest_V_1_data_out");
    sc_trace(mVcdFile, out_data_dest_V_1_vld_in, "out_data_dest_V_1_vld_in");
    sc_trace(mVcdFile, out_data_dest_V_1_vld_out, "out_data_dest_V_1_vld_out");
    sc_trace(mVcdFile, out_data_dest_V_1_ack_in, "out_data_dest_V_1_ack_in");
    sc_trace(mVcdFile, out_data_dest_V_1_ack_out, "out_data_dest_V_1_ack_out");
    sc_trace(mVcdFile, out_data_dest_V_1_payload_A, "out_data_dest_V_1_payload_A");
    sc_trace(mVcdFile, out_data_dest_V_1_payload_B, "out_data_dest_V_1_payload_B");
    sc_trace(mVcdFile, out_data_dest_V_1_sel_rd, "out_data_dest_V_1_sel_rd");
    sc_trace(mVcdFile, out_data_dest_V_1_sel_wr, "out_data_dest_V_1_sel_wr");
    sc_trace(mVcdFile, out_data_dest_V_1_sel, "out_data_dest_V_1_sel");
    sc_trace(mVcdFile, out_data_dest_V_1_load_A, "out_data_dest_V_1_load_A");
    sc_trace(mVcdFile, out_data_dest_V_1_load_B, "out_data_dest_V_1_load_B");
    sc_trace(mVcdFile, out_data_dest_V_1_state, "out_data_dest_V_1_state");
    sc_trace(mVcdFile, out_data_dest_V_1_state_cmp_full, "out_data_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, constant_V, "constant_V");
    sc_trace(mVcdFile, constant_V_0_data_reg, "constant_V_0_data_reg");
    sc_trace(mVcdFile, constant_V_0_vld_reg, "constant_V_0_vld_reg");
    sc_trace(mVcdFile, constant_V_0_ack_out, "constant_V_0_ack_out");
    sc_trace(mVcdFile, in_data_TDATA_blk_n, "in_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, out_data_TDATA_blk_n, "out_data_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, constant_V_read_reg_140, "constant_V_read_reg_140");
    sc_trace(mVcdFile, in_data_data_V_tmp_reg_145, "in_data_data_V_tmp_reg_145");
    sc_trace(mVcdFile, in_data_keep_V_tmp_reg_150, "in_data_keep_V_tmp_reg_150");
    sc_trace(mVcdFile, in_data_strb_V_tmp_reg_155, "in_data_strb_V_tmp_reg_155");
    sc_trace(mVcdFile, in_data_user_V_tmp_reg_160, "in_data_user_V_tmp_reg_160");
    sc_trace(mVcdFile, in_data_last_V_tmp_reg_165, "in_data_last_V_tmp_reg_165");
    sc_trace(mVcdFile, in_data_id_V_tmp_reg_170, "in_data_id_V_tmp_reg_170");
    sc_trace(mVcdFile, in_data_dest_V_tmp_reg_175, "in_data_dest_V_tmp_reg_175");
    sc_trace(mVcdFile, out_data_data_V_tmp_fu_135_p2, "out_data_data_V_tmp_fu_135_p2");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("mult_constant.hdltvin.dat");
    mHdltvoutHandle.open("mult_constant.hdltvout.dat");
}

mult_constant::~mult_constant() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mult_constant_AXILiteS_s_axi_U;
}

void mult_constant::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mult_constant::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_vld_out.read()))) {
            in_data_data_V_0_sel_rd =  (sc_logic) (~in_data_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_ack_in.read()))) {
            in_data_data_V_0_sel_wr =  (sc_logic) (~in_data_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_data_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_data_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_data_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_data_data_V_0_state.read(), ap_const_lv2_2)))) {
            in_data_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_data_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_data_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_data_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_data_data_V_0_state.read(), ap_const_lv2_1)))) {
            in_data_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_data_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_data_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_data_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_data_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_data_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_ack_out.read()))))) {
            in_data_data_V_0_state = ap_const_lv2_3;
        } else {
            in_data_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_vld_out.read()))) {
            in_data_dest_V_0_sel_rd =  (sc_logic) (~in_data_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_ack_in.read()))) {
            in_data_dest_V_0_sel_wr =  (sc_logic) (~in_data_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_data_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_data_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_data_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_data_dest_V_0_state.read())))) {
            in_data_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_data_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_data_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_data_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_data_dest_V_0_state.read())))) {
            in_data_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_data_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_data_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_data_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_data_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_data_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_ack_out.read()))))) {
            in_data_dest_V_0_state = ap_const_lv2_3;
        } else {
            in_data_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_vld_out.read()))) {
            in_data_id_V_0_sel_rd =  (sc_logic) (~in_data_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_ack_in.read()))) {
            in_data_id_V_0_sel_wr =  (sc_logic) (~in_data_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_data_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_data_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_data_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_data_id_V_0_state.read())))) {
            in_data_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_data_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_data_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_data_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_data_id_V_0_state.read())))) {
            in_data_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_data_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_data_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_data_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_data_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_data_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_ack_out.read()))))) {
            in_data_id_V_0_state = ap_const_lv2_3;
        } else {
            in_data_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_vld_out.read()))) {
            in_data_keep_V_0_sel_rd =  (sc_logic) (~in_data_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_ack_in.read()))) {
            in_data_keep_V_0_sel_wr =  (sc_logic) (~in_data_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_data_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_data_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_data_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_data_keep_V_0_state.read())))) {
            in_data_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_data_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_data_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_data_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_data_keep_V_0_state.read())))) {
            in_data_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_data_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_data_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_data_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_data_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_data_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_ack_out.read()))))) {
            in_data_keep_V_0_state = ap_const_lv2_3;
        } else {
            in_data_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_vld_out.read()))) {
            in_data_last_V_0_sel_rd =  (sc_logic) (~in_data_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_ack_in.read()))) {
            in_data_last_V_0_sel_wr =  (sc_logic) (~in_data_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_data_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_data_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_data_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_data_last_V_0_state.read())))) {
            in_data_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_data_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_data_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_data_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_data_last_V_0_state.read())))) {
            in_data_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_data_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_data_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_data_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_data_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_data_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_ack_out.read()))))) {
            in_data_last_V_0_state = ap_const_lv2_3;
        } else {
            in_data_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_vld_out.read()))) {
            in_data_strb_V_0_sel_rd =  (sc_logic) (~in_data_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_ack_in.read()))) {
            in_data_strb_V_0_sel_wr =  (sc_logic) (~in_data_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_data_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_data_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_data_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_data_strb_V_0_state.read())))) {
            in_data_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_data_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_data_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_data_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_data_strb_V_0_state.read())))) {
            in_data_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_data_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_data_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_data_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_data_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_data_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_ack_out.read()))))) {
            in_data_strb_V_0_state = ap_const_lv2_3;
        } else {
            in_data_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_vld_out.read()))) {
            in_data_user_V_0_sel_rd =  (sc_logic) (~in_data_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_ack_in.read()))) {
            in_data_user_V_0_sel_wr =  (sc_logic) (~in_data_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_data_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_data_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_data_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_data_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_data_user_V_0_state.read())))) {
            in_data_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_data_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_data_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_data_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_data_user_V_0_state.read())))) {
            in_data_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_data_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_data_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_data_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_data_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_data_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_ack_out.read()))))) {
            in_data_user_V_0_state = ap_const_lv2_3;
        } else {
            in_data_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_vld_out.read()))) {
            out_data_data_V_1_sel_rd =  (sc_logic) (~out_data_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_ack_in.read()))) {
            out_data_data_V_1_sel_wr =  (sc_logic) (~out_data_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_data_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_data_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_data_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_data_data_V_1_state.read())))) {
            out_data_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_data_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_data_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_data_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_data_V_1_state.read())))) {
            out_data_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_data_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_data_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_data_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_ack_out.read()))))) {
            out_data_data_V_1_state = ap_const_lv2_3;
        } else {
            out_data_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_vld_out.read()))) {
            out_data_dest_V_1_sel_rd =  (sc_logic) (~out_data_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_ack_in.read()))) {
            out_data_dest_V_1_sel_wr =  (sc_logic) (~out_data_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_data_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_data_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_data_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_data_dest_V_1_state.read())))) {
            out_data_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_data_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_data_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_data_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_dest_V_1_state.read())))) {
            out_data_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_data_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_data_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_data_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_ack_out.read()))))) {
            out_data_dest_V_1_state = ap_const_lv2_3;
        } else {
            out_data_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_vld_out.read()))) {
            out_data_id_V_1_sel_rd =  (sc_logic) (~out_data_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_ack_in.read()))) {
            out_data_id_V_1_sel_wr =  (sc_logic) (~out_data_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_data_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_data_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_data_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_data_id_V_1_state.read())))) {
            out_data_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_data_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_data_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_data_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_id_V_1_state.read())))) {
            out_data_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_data_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_data_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_data_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_ack_out.read()))))) {
            out_data_id_V_1_state = ap_const_lv2_3;
        } else {
            out_data_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_vld_out.read()))) {
            out_data_keep_V_1_sel_rd =  (sc_logic) (~out_data_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_ack_in.read()))) {
            out_data_keep_V_1_sel_wr =  (sc_logic) (~out_data_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_data_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_data_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_data_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_data_keep_V_1_state.read())))) {
            out_data_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_data_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_data_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_data_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_keep_V_1_state.read())))) {
            out_data_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_data_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_data_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_data_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_ack_out.read()))))) {
            out_data_keep_V_1_state = ap_const_lv2_3;
        } else {
            out_data_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_vld_out.read()))) {
            out_data_last_V_1_sel_rd =  (sc_logic) (~out_data_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_ack_in.read()))) {
            out_data_last_V_1_sel_wr =  (sc_logic) (~out_data_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_data_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_data_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_data_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_data_last_V_1_state.read())))) {
            out_data_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_data_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_data_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_data_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_last_V_1_state.read())))) {
            out_data_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_data_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_data_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_data_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_ack_out.read()))))) {
            out_data_last_V_1_state = ap_const_lv2_3;
        } else {
            out_data_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_vld_out.read()))) {
            out_data_strb_V_1_sel_rd =  (sc_logic) (~out_data_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_ack_in.read()))) {
            out_data_strb_V_1_sel_wr =  (sc_logic) (~out_data_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_data_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_data_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_data_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_data_strb_V_1_state.read())))) {
            out_data_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_data_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_data_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_data_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_strb_V_1_state.read())))) {
            out_data_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_data_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_data_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_data_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_ack_out.read()))))) {
            out_data_strb_V_1_state = ap_const_lv2_3;
        } else {
            out_data_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_vld_out.read()))) {
            out_data_user_V_1_sel_rd =  (sc_logic) (~out_data_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_ack_in.read()))) {
            out_data_user_V_1_sel_wr =  (sc_logic) (~out_data_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_data_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_data_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_data_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_data_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_data_user_V_1_state.read())))) {
            out_data_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_data_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_data_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_data_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_user_V_1_state.read())))) {
            out_data_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_data_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_data_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_data_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_data_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_ack_out.read()))))) {
            out_data_user_V_1_state = ap_const_lv2_3;
        } else {
            out_data_user_V_1_state = ap_const_lv2_2;
        }
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, constant_V_0_vld_reg.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, constant_V_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, constant_V_0_ack_out.read())))) {
        constant_V_0_data_reg = constant_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(in_data_data_V_0_vld_out.read(), ap_const_logic_1))) {
        constant_V_read_reg_140 = constant_V_0_data_reg.read();
        in_data_data_V_tmp_reg_145 = in_data_data_V_0_data_out.read();
        in_data_dest_V_tmp_reg_175 = in_data_dest_V_0_data_out.read();
        in_data_id_V_tmp_reg_170 = in_data_id_V_0_data_out.read();
        in_data_keep_V_tmp_reg_150 = in_data_keep_V_0_data_out.read();
        in_data_last_V_tmp_reg_165 = in_data_last_V_0_data_out.read();
        in_data_strb_V_tmp_reg_155 = in_data_strb_V_0_data_out.read();
        in_data_user_V_tmp_reg_160 = in_data_user_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_load_A.read())) {
        in_data_data_V_0_payload_A = in_data_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_load_B.read())) {
        in_data_data_V_0_payload_B = in_data_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_load_A.read())) {
        in_data_dest_V_0_payload_A = in_data_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_load_B.read())) {
        in_data_dest_V_0_payload_B = in_data_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_load_A.read())) {
        in_data_id_V_0_payload_A = in_data_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_load_B.read())) {
        in_data_id_V_0_payload_B = in_data_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_load_A.read())) {
        in_data_keep_V_0_payload_A = in_data_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_load_B.read())) {
        in_data_keep_V_0_payload_B = in_data_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_load_A.read())) {
        in_data_last_V_0_payload_A = in_data_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_load_B.read())) {
        in_data_last_V_0_payload_B = in_data_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_load_A.read())) {
        in_data_strb_V_0_payload_A = in_data_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_load_B.read())) {
        in_data_strb_V_0_payload_B = in_data_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_load_A.read())) {
        in_data_user_V_0_payload_A = in_data_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_load_B.read())) {
        in_data_user_V_0_payload_B = in_data_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_load_A.read())) {
        out_data_data_V_1_payload_A = out_data_data_V_tmp_fu_135_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_load_B.read())) {
        out_data_data_V_1_payload_B = out_data_data_V_tmp_fu_135_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_load_A.read())) {
        out_data_dest_V_1_payload_A = in_data_dest_V_tmp_reg_175.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_load_B.read())) {
        out_data_dest_V_1_payload_B = in_data_dest_V_tmp_reg_175.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_load_A.read())) {
        out_data_id_V_1_payload_A = in_data_id_V_tmp_reg_170.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_load_B.read())) {
        out_data_id_V_1_payload_B = in_data_id_V_tmp_reg_170.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_load_A.read())) {
        out_data_keep_V_1_payload_A = in_data_keep_V_tmp_reg_150.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_load_B.read())) {
        out_data_keep_V_1_payload_B = in_data_keep_V_tmp_reg_150.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_load_A.read())) {
        out_data_last_V_1_payload_A = in_data_last_V_tmp_reg_165.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_load_B.read())) {
        out_data_last_V_1_payload_B = in_data_last_V_tmp_reg_165.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_load_A.read())) {
        out_data_strb_V_1_payload_A = in_data_strb_V_tmp_reg_155.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_load_B.read())) {
        out_data_strb_V_1_payload_B = in_data_strb_V_tmp_reg_155.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_load_A.read())) {
        out_data_user_V_1_payload_A = in_data_user_V_tmp_reg_160.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_load_B.read())) {
        out_data_user_V_1_payload_B = in_data_user_V_tmp_reg_160.read();
    }
}

void mult_constant::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mult_constant::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mult_constant::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mult_constant::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(ap_const_logic_0, out_data_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_dest_V_1_ack_in.read()));
}

void mult_constant::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mult_constant::thread_constant_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_dest_V_1_ack_in.read())))) {
        constant_V_0_ack_out = ap_const_logic_1;
    } else {
        constant_V_0_ack_out = ap_const_logic_0;
    }
}

void mult_constant::thread_in_data_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_data_TDATA_blk_n = in_data_data_V_0_state.read()[0];
    } else {
        in_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void mult_constant::thread_in_data_TREADY() {
    in_data_TREADY = in_data_dest_V_0_state.read()[1];
}

void mult_constant::thread_in_data_data_V_0_ack_in() {
    in_data_data_V_0_ack_in = in_data_data_V_0_state.read()[1];
}

void mult_constant::thread_in_data_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(in_data_data_V_0_vld_out.read(), ap_const_logic_1))) {
        in_data_data_V_0_ack_out = ap_const_logic_1;
    } else {
        in_data_data_V_0_ack_out = ap_const_logic_0;
    }
}

void mult_constant::thread_in_data_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_data_V_0_sel.read())) {
        in_data_data_V_0_data_out = in_data_data_V_0_payload_B.read();
    } else {
        in_data_data_V_0_data_out = in_data_data_V_0_payload_A.read();
    }
}

void mult_constant::thread_in_data_data_V_0_load_A() {
    in_data_data_V_0_load_A = (in_data_data_V_0_state_cmp_full.read() & ~in_data_data_V_0_sel_wr.read());
}

void mult_constant::thread_in_data_data_V_0_load_B() {
    in_data_data_V_0_load_B = (in_data_data_V_0_sel_wr.read() & in_data_data_V_0_state_cmp_full.read());
}

void mult_constant::thread_in_data_data_V_0_sel() {
    in_data_data_V_0_sel = in_data_data_V_0_sel_rd.read();
}

void mult_constant::thread_in_data_data_V_0_state_cmp_full() {
    in_data_data_V_0_state_cmp_full =  (sc_logic) ((!in_data_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_data_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_in_data_data_V_0_vld_in() {
    in_data_data_V_0_vld_in = in_data_TVALID.read();
}

void mult_constant::thread_in_data_data_V_0_vld_out() {
    in_data_data_V_0_vld_out = in_data_data_V_0_state.read()[0];
}

void mult_constant::thread_in_data_dest_V_0_ack_in() {
    in_data_dest_V_0_ack_in = in_data_dest_V_0_state.read()[1];
}

void mult_constant::thread_in_data_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(in_data_data_V_0_vld_out.read(), ap_const_logic_1))) {
        in_data_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        in_data_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void mult_constant::thread_in_data_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_dest_V_0_sel.read())) {
        in_data_dest_V_0_data_out = in_data_dest_V_0_payload_B.read();
    } else {
        in_data_dest_V_0_data_out = in_data_dest_V_0_payload_A.read();
    }
}

void mult_constant::thread_in_data_dest_V_0_load_A() {
    in_data_dest_V_0_load_A = (in_data_dest_V_0_state_cmp_full.read() & ~in_data_dest_V_0_sel_wr.read());
}

void mult_constant::thread_in_data_dest_V_0_load_B() {
    in_data_dest_V_0_load_B = (in_data_dest_V_0_sel_wr.read() & in_data_dest_V_0_state_cmp_full.read());
}

void mult_constant::thread_in_data_dest_V_0_sel() {
    in_data_dest_V_0_sel = in_data_dest_V_0_sel_rd.read();
}

void mult_constant::thread_in_data_dest_V_0_state_cmp_full() {
    in_data_dest_V_0_state_cmp_full =  (sc_logic) ((!in_data_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_data_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_in_data_dest_V_0_vld_in() {
    in_data_dest_V_0_vld_in = in_data_TVALID.read();
}

void mult_constant::thread_in_data_dest_V_0_vld_out() {
    in_data_dest_V_0_vld_out = in_data_dest_V_0_state.read()[0];
}

void mult_constant::thread_in_data_id_V_0_ack_in() {
    in_data_id_V_0_ack_in = in_data_id_V_0_state.read()[1];
}

void mult_constant::thread_in_data_id_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(in_data_data_V_0_vld_out.read(), ap_const_logic_1))) {
        in_data_id_V_0_ack_out = ap_const_logic_1;
    } else {
        in_data_id_V_0_ack_out = ap_const_logic_0;
    }
}

void mult_constant::thread_in_data_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_id_V_0_sel.read())) {
        in_data_id_V_0_data_out = in_data_id_V_0_payload_B.read();
    } else {
        in_data_id_V_0_data_out = in_data_id_V_0_payload_A.read();
    }
}

void mult_constant::thread_in_data_id_V_0_load_A() {
    in_data_id_V_0_load_A = (in_data_id_V_0_state_cmp_full.read() & ~in_data_id_V_0_sel_wr.read());
}

void mult_constant::thread_in_data_id_V_0_load_B() {
    in_data_id_V_0_load_B = (in_data_id_V_0_sel_wr.read() & in_data_id_V_0_state_cmp_full.read());
}

void mult_constant::thread_in_data_id_V_0_sel() {
    in_data_id_V_0_sel = in_data_id_V_0_sel_rd.read();
}

void mult_constant::thread_in_data_id_V_0_state_cmp_full() {
    in_data_id_V_0_state_cmp_full =  (sc_logic) ((!in_data_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_data_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_in_data_id_V_0_vld_in() {
    in_data_id_V_0_vld_in = in_data_TVALID.read();
}

void mult_constant::thread_in_data_id_V_0_vld_out() {
    in_data_id_V_0_vld_out = in_data_id_V_0_state.read()[0];
}

void mult_constant::thread_in_data_keep_V_0_ack_in() {
    in_data_keep_V_0_ack_in = in_data_keep_V_0_state.read()[1];
}

void mult_constant::thread_in_data_keep_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(in_data_data_V_0_vld_out.read(), ap_const_logic_1))) {
        in_data_keep_V_0_ack_out = ap_const_logic_1;
    } else {
        in_data_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void mult_constant::thread_in_data_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_keep_V_0_sel.read())) {
        in_data_keep_V_0_data_out = in_data_keep_V_0_payload_B.read();
    } else {
        in_data_keep_V_0_data_out = in_data_keep_V_0_payload_A.read();
    }
}

void mult_constant::thread_in_data_keep_V_0_load_A() {
    in_data_keep_V_0_load_A = (in_data_keep_V_0_state_cmp_full.read() & ~in_data_keep_V_0_sel_wr.read());
}

void mult_constant::thread_in_data_keep_V_0_load_B() {
    in_data_keep_V_0_load_B = (in_data_keep_V_0_sel_wr.read() & in_data_keep_V_0_state_cmp_full.read());
}

void mult_constant::thread_in_data_keep_V_0_sel() {
    in_data_keep_V_0_sel = in_data_keep_V_0_sel_rd.read();
}

void mult_constant::thread_in_data_keep_V_0_state_cmp_full() {
    in_data_keep_V_0_state_cmp_full =  (sc_logic) ((!in_data_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_data_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_in_data_keep_V_0_vld_in() {
    in_data_keep_V_0_vld_in = in_data_TVALID.read();
}

void mult_constant::thread_in_data_keep_V_0_vld_out() {
    in_data_keep_V_0_vld_out = in_data_keep_V_0_state.read()[0];
}

void mult_constant::thread_in_data_last_V_0_ack_in() {
    in_data_last_V_0_ack_in = in_data_last_V_0_state.read()[1];
}

void mult_constant::thread_in_data_last_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(in_data_data_V_0_vld_out.read(), ap_const_logic_1))) {
        in_data_last_V_0_ack_out = ap_const_logic_1;
    } else {
        in_data_last_V_0_ack_out = ap_const_logic_0;
    }
}

void mult_constant::thread_in_data_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_last_V_0_sel.read())) {
        in_data_last_V_0_data_out = in_data_last_V_0_payload_B.read();
    } else {
        in_data_last_V_0_data_out = in_data_last_V_0_payload_A.read();
    }
}

void mult_constant::thread_in_data_last_V_0_load_A() {
    in_data_last_V_0_load_A = (in_data_last_V_0_state_cmp_full.read() & ~in_data_last_V_0_sel_wr.read());
}

void mult_constant::thread_in_data_last_V_0_load_B() {
    in_data_last_V_0_load_B = (in_data_last_V_0_sel_wr.read() & in_data_last_V_0_state_cmp_full.read());
}

void mult_constant::thread_in_data_last_V_0_sel() {
    in_data_last_V_0_sel = in_data_last_V_0_sel_rd.read();
}

void mult_constant::thread_in_data_last_V_0_state_cmp_full() {
    in_data_last_V_0_state_cmp_full =  (sc_logic) ((!in_data_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_data_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_in_data_last_V_0_vld_in() {
    in_data_last_V_0_vld_in = in_data_TVALID.read();
}

void mult_constant::thread_in_data_last_V_0_vld_out() {
    in_data_last_V_0_vld_out = in_data_last_V_0_state.read()[0];
}

void mult_constant::thread_in_data_strb_V_0_ack_in() {
    in_data_strb_V_0_ack_in = in_data_strb_V_0_state.read()[1];
}

void mult_constant::thread_in_data_strb_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(in_data_data_V_0_vld_out.read(), ap_const_logic_1))) {
        in_data_strb_V_0_ack_out = ap_const_logic_1;
    } else {
        in_data_strb_V_0_ack_out = ap_const_logic_0;
    }
}

void mult_constant::thread_in_data_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_strb_V_0_sel.read())) {
        in_data_strb_V_0_data_out = in_data_strb_V_0_payload_B.read();
    } else {
        in_data_strb_V_0_data_out = in_data_strb_V_0_payload_A.read();
    }
}

void mult_constant::thread_in_data_strb_V_0_load_A() {
    in_data_strb_V_0_load_A = (in_data_strb_V_0_state_cmp_full.read() & ~in_data_strb_V_0_sel_wr.read());
}

void mult_constant::thread_in_data_strb_V_0_load_B() {
    in_data_strb_V_0_load_B = (in_data_strb_V_0_sel_wr.read() & in_data_strb_V_0_state_cmp_full.read());
}

void mult_constant::thread_in_data_strb_V_0_sel() {
    in_data_strb_V_0_sel = in_data_strb_V_0_sel_rd.read();
}

void mult_constant::thread_in_data_strb_V_0_state_cmp_full() {
    in_data_strb_V_0_state_cmp_full =  (sc_logic) ((!in_data_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_data_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_in_data_strb_V_0_vld_in() {
    in_data_strb_V_0_vld_in = in_data_TVALID.read();
}

void mult_constant::thread_in_data_strb_V_0_vld_out() {
    in_data_strb_V_0_vld_out = in_data_strb_V_0_state.read()[0];
}

void mult_constant::thread_in_data_user_V_0_ack_in() {
    in_data_user_V_0_ack_in = in_data_user_V_0_state.read()[1];
}

void mult_constant::thread_in_data_user_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(in_data_data_V_0_vld_out.read(), ap_const_logic_1))) {
        in_data_user_V_0_ack_out = ap_const_logic_1;
    } else {
        in_data_user_V_0_ack_out = ap_const_logic_0;
    }
}

void mult_constant::thread_in_data_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_data_user_V_0_sel.read())) {
        in_data_user_V_0_data_out = in_data_user_V_0_payload_B.read();
    } else {
        in_data_user_V_0_data_out = in_data_user_V_0_payload_A.read();
    }
}

void mult_constant::thread_in_data_user_V_0_load_A() {
    in_data_user_V_0_load_A = (in_data_user_V_0_state_cmp_full.read() & ~in_data_user_V_0_sel_wr.read());
}

void mult_constant::thread_in_data_user_V_0_load_B() {
    in_data_user_V_0_load_B = (in_data_user_V_0_sel_wr.read() & in_data_user_V_0_state_cmp_full.read());
}

void mult_constant::thread_in_data_user_V_0_sel() {
    in_data_user_V_0_sel = in_data_user_V_0_sel_rd.read();
}

void mult_constant::thread_in_data_user_V_0_state_cmp_full() {
    in_data_user_V_0_state_cmp_full =  (sc_logic) ((!in_data_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_data_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_in_data_user_V_0_vld_in() {
    in_data_user_V_0_vld_in = in_data_TVALID.read();
}

void mult_constant::thread_in_data_user_V_0_vld_out() {
    in_data_user_V_0_vld_out = in_data_user_V_0_state.read()[0];
}

void mult_constant::thread_out_data_TDATA() {
    out_data_TDATA = out_data_data_V_1_data_out.read();
}

void mult_constant::thread_out_data_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        out_data_TDATA_blk_n = out_data_data_V_1_state.read()[1];
    } else {
        out_data_TDATA_blk_n = ap_const_logic_1;
    }
}

void mult_constant::thread_out_data_TDEST() {
    out_data_TDEST = out_data_dest_V_1_data_out.read();
}

void mult_constant::thread_out_data_TID() {
    out_data_TID = out_data_id_V_1_data_out.read();
}

void mult_constant::thread_out_data_TKEEP() {
    out_data_TKEEP = out_data_keep_V_1_data_out.read();
}

void mult_constant::thread_out_data_TLAST() {
    out_data_TLAST = out_data_last_V_1_data_out.read();
}

void mult_constant::thread_out_data_TSTRB() {
    out_data_TSTRB = out_data_strb_V_1_data_out.read();
}

void mult_constant::thread_out_data_TUSER() {
    out_data_TUSER = out_data_user_V_1_data_out.read();
}

void mult_constant::thread_out_data_TVALID() {
    out_data_TVALID = out_data_dest_V_1_state.read()[0];
}

void mult_constant::thread_out_data_data_V_1_ack_in() {
    out_data_data_V_1_ack_in = out_data_data_V_1_state.read()[1];
}

void mult_constant::thread_out_data_data_V_1_ack_out() {
    out_data_data_V_1_ack_out = out_data_TREADY.read();
}

void mult_constant::thread_out_data_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_data_V_1_sel.read())) {
        out_data_data_V_1_data_out = out_data_data_V_1_payload_B.read();
    } else {
        out_data_data_V_1_data_out = out_data_data_V_1_payload_A.read();
    }
}

void mult_constant::thread_out_data_data_V_1_load_A() {
    out_data_data_V_1_load_A = (out_data_data_V_1_state_cmp_full.read() & ~out_data_data_V_1_sel_wr.read());
}

void mult_constant::thread_out_data_data_V_1_load_B() {
    out_data_data_V_1_load_B = (out_data_data_V_1_sel_wr.read() & out_data_data_V_1_state_cmp_full.read());
}

void mult_constant::thread_out_data_data_V_1_sel() {
    out_data_data_V_1_sel = out_data_data_V_1_sel_rd.read();
}

void mult_constant::thread_out_data_data_V_1_state_cmp_full() {
    out_data_data_V_1_state_cmp_full =  (sc_logic) ((!out_data_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_data_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_out_data_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_data_data_V_1_ack_in.read(), ap_const_logic_1))) {
        out_data_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_data_data_V_1_vld_in = ap_const_logic_0;
    }
}

void mult_constant::thread_out_data_data_V_1_vld_out() {
    out_data_data_V_1_vld_out = out_data_data_V_1_state.read()[0];
}

void mult_constant::thread_out_data_data_V_tmp_fu_135_p2() {
    out_data_data_V_tmp_fu_135_p2 = (!in_data_data_V_tmp_reg_145.read().is_01() || !constant_V_read_reg_140.read().is_01())? sc_lv<32>(): sc_bigint<32>(in_data_data_V_tmp_reg_145.read()) * sc_bigint<32>(constant_V_read_reg_140.read());
}

void mult_constant::thread_out_data_dest_V_1_ack_in() {
    out_data_dest_V_1_ack_in = out_data_dest_V_1_state.read()[1];
}

void mult_constant::thread_out_data_dest_V_1_ack_out() {
    out_data_dest_V_1_ack_out = out_data_TREADY.read();
}

void mult_constant::thread_out_data_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_dest_V_1_sel.read())) {
        out_data_dest_V_1_data_out = out_data_dest_V_1_payload_B.read();
    } else {
        out_data_dest_V_1_data_out = out_data_dest_V_1_payload_A.read();
    }
}

void mult_constant::thread_out_data_dest_V_1_load_A() {
    out_data_dest_V_1_load_A = (out_data_dest_V_1_state_cmp_full.read() & ~out_data_dest_V_1_sel_wr.read());
}

void mult_constant::thread_out_data_dest_V_1_load_B() {
    out_data_dest_V_1_load_B = (out_data_dest_V_1_sel_wr.read() & out_data_dest_V_1_state_cmp_full.read());
}

void mult_constant::thread_out_data_dest_V_1_sel() {
    out_data_dest_V_1_sel = out_data_dest_V_1_sel_rd.read();
}

void mult_constant::thread_out_data_dest_V_1_state_cmp_full() {
    out_data_dest_V_1_state_cmp_full =  (sc_logic) ((!out_data_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_data_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_out_data_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_data_data_V_1_ack_in.read(), ap_const_logic_1))) {
        out_data_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        out_data_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void mult_constant::thread_out_data_dest_V_1_vld_out() {
    out_data_dest_V_1_vld_out = out_data_dest_V_1_state.read()[0];
}

void mult_constant::thread_out_data_id_V_1_ack_in() {
    out_data_id_V_1_ack_in = out_data_id_V_1_state.read()[1];
}

void mult_constant::thread_out_data_id_V_1_ack_out() {
    out_data_id_V_1_ack_out = out_data_TREADY.read();
}

void mult_constant::thread_out_data_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_id_V_1_sel.read())) {
        out_data_id_V_1_data_out = out_data_id_V_1_payload_B.read();
    } else {
        out_data_id_V_1_data_out = out_data_id_V_1_payload_A.read();
    }
}

void mult_constant::thread_out_data_id_V_1_load_A() {
    out_data_id_V_1_load_A = (out_data_id_V_1_state_cmp_full.read() & ~out_data_id_V_1_sel_wr.read());
}

void mult_constant::thread_out_data_id_V_1_load_B() {
    out_data_id_V_1_load_B = (out_data_id_V_1_sel_wr.read() & out_data_id_V_1_state_cmp_full.read());
}

void mult_constant::thread_out_data_id_V_1_sel() {
    out_data_id_V_1_sel = out_data_id_V_1_sel_rd.read();
}

void mult_constant::thread_out_data_id_V_1_state_cmp_full() {
    out_data_id_V_1_state_cmp_full =  (sc_logic) ((!out_data_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_data_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_out_data_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_data_data_V_1_ack_in.read(), ap_const_logic_1))) {
        out_data_id_V_1_vld_in = ap_const_logic_1;
    } else {
        out_data_id_V_1_vld_in = ap_const_logic_0;
    }
}

void mult_constant::thread_out_data_id_V_1_vld_out() {
    out_data_id_V_1_vld_out = out_data_id_V_1_state.read()[0];
}

void mult_constant::thread_out_data_keep_V_1_ack_in() {
    out_data_keep_V_1_ack_in = out_data_keep_V_1_state.read()[1];
}

void mult_constant::thread_out_data_keep_V_1_ack_out() {
    out_data_keep_V_1_ack_out = out_data_TREADY.read();
}

void mult_constant::thread_out_data_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_keep_V_1_sel.read())) {
        out_data_keep_V_1_data_out = out_data_keep_V_1_payload_B.read();
    } else {
        out_data_keep_V_1_data_out = out_data_keep_V_1_payload_A.read();
    }
}

void mult_constant::thread_out_data_keep_V_1_load_A() {
    out_data_keep_V_1_load_A = (out_data_keep_V_1_state_cmp_full.read() & ~out_data_keep_V_1_sel_wr.read());
}

void mult_constant::thread_out_data_keep_V_1_load_B() {
    out_data_keep_V_1_load_B = (out_data_keep_V_1_sel_wr.read() & out_data_keep_V_1_state_cmp_full.read());
}

void mult_constant::thread_out_data_keep_V_1_sel() {
    out_data_keep_V_1_sel = out_data_keep_V_1_sel_rd.read();
}

void mult_constant::thread_out_data_keep_V_1_state_cmp_full() {
    out_data_keep_V_1_state_cmp_full =  (sc_logic) ((!out_data_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_data_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_out_data_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_data_data_V_1_ack_in.read(), ap_const_logic_1))) {
        out_data_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        out_data_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void mult_constant::thread_out_data_keep_V_1_vld_out() {
    out_data_keep_V_1_vld_out = out_data_keep_V_1_state.read()[0];
}

void mult_constant::thread_out_data_last_V_1_ack_in() {
    out_data_last_V_1_ack_in = out_data_last_V_1_state.read()[1];
}

void mult_constant::thread_out_data_last_V_1_ack_out() {
    out_data_last_V_1_ack_out = out_data_TREADY.read();
}

void mult_constant::thread_out_data_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_last_V_1_sel.read())) {
        out_data_last_V_1_data_out = out_data_last_V_1_payload_B.read();
    } else {
        out_data_last_V_1_data_out = out_data_last_V_1_payload_A.read();
    }
}

void mult_constant::thread_out_data_last_V_1_load_A() {
    out_data_last_V_1_load_A = (out_data_last_V_1_state_cmp_full.read() & ~out_data_last_V_1_sel_wr.read());
}

void mult_constant::thread_out_data_last_V_1_load_B() {
    out_data_last_V_1_load_B = (out_data_last_V_1_sel_wr.read() & out_data_last_V_1_state_cmp_full.read());
}

void mult_constant::thread_out_data_last_V_1_sel() {
    out_data_last_V_1_sel = out_data_last_V_1_sel_rd.read();
}

void mult_constant::thread_out_data_last_V_1_state_cmp_full() {
    out_data_last_V_1_state_cmp_full =  (sc_logic) ((!out_data_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_data_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_out_data_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_data_data_V_1_ack_in.read(), ap_const_logic_1))) {
        out_data_last_V_1_vld_in = ap_const_logic_1;
    } else {
        out_data_last_V_1_vld_in = ap_const_logic_0;
    }
}

void mult_constant::thread_out_data_last_V_1_vld_out() {
    out_data_last_V_1_vld_out = out_data_last_V_1_state.read()[0];
}

void mult_constant::thread_out_data_strb_V_1_ack_in() {
    out_data_strb_V_1_ack_in = out_data_strb_V_1_state.read()[1];
}

void mult_constant::thread_out_data_strb_V_1_ack_out() {
    out_data_strb_V_1_ack_out = out_data_TREADY.read();
}

void mult_constant::thread_out_data_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_strb_V_1_sel.read())) {
        out_data_strb_V_1_data_out = out_data_strb_V_1_payload_B.read();
    } else {
        out_data_strb_V_1_data_out = out_data_strb_V_1_payload_A.read();
    }
}

void mult_constant::thread_out_data_strb_V_1_load_A() {
    out_data_strb_V_1_load_A = (out_data_strb_V_1_state_cmp_full.read() & ~out_data_strb_V_1_sel_wr.read());
}

void mult_constant::thread_out_data_strb_V_1_load_B() {
    out_data_strb_V_1_load_B = (out_data_strb_V_1_sel_wr.read() & out_data_strb_V_1_state_cmp_full.read());
}

void mult_constant::thread_out_data_strb_V_1_sel() {
    out_data_strb_V_1_sel = out_data_strb_V_1_sel_rd.read();
}

void mult_constant::thread_out_data_strb_V_1_state_cmp_full() {
    out_data_strb_V_1_state_cmp_full =  (sc_logic) ((!out_data_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_data_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_out_data_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_data_data_V_1_ack_in.read(), ap_const_logic_1))) {
        out_data_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        out_data_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void mult_constant::thread_out_data_strb_V_1_vld_out() {
    out_data_strb_V_1_vld_out = out_data_strb_V_1_state.read()[0];
}

void mult_constant::thread_out_data_user_V_1_ack_in() {
    out_data_user_V_1_ack_in = out_data_user_V_1_state.read()[1];
}

void mult_constant::thread_out_data_user_V_1_ack_out() {
    out_data_user_V_1_ack_out = out_data_TREADY.read();
}

void mult_constant::thread_out_data_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_data_user_V_1_sel.read())) {
        out_data_user_V_1_data_out = out_data_user_V_1_payload_B.read();
    } else {
        out_data_user_V_1_data_out = out_data_user_V_1_payload_A.read();
    }
}

void mult_constant::thread_out_data_user_V_1_load_A() {
    out_data_user_V_1_load_A = (out_data_user_V_1_state_cmp_full.read() & ~out_data_user_V_1_sel_wr.read());
}

void mult_constant::thread_out_data_user_V_1_load_B() {
    out_data_user_V_1_load_B = (out_data_user_V_1_sel_wr.read() & out_data_user_V_1_state_cmp_full.read());
}

void mult_constant::thread_out_data_user_V_1_sel() {
    out_data_user_V_1_sel = out_data_user_V_1_sel_rd.read();
}

void mult_constant::thread_out_data_user_V_1_state_cmp_full() {
    out_data_user_V_1_state_cmp_full =  (sc_logic) ((!out_data_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_data_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void mult_constant::thread_out_data_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_data_data_V_1_ack_in.read(), ap_const_logic_1))) {
        out_data_user_V_1_vld_in = ap_const_logic_1;
    } else {
        out_data_user_V_1_vld_in = ap_const_logic_0;
    }
}

void mult_constant::thread_out_data_user_V_1_vld_out() {
    out_data_user_V_1_vld_out = out_data_user_V_1_state.read()[0];
}

void mult_constant::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(in_data_data_V_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(out_data_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_data_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_data_dest_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void mult_constant::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TDATA\" :  \"" << in_data_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TVALID\" :  \"" << in_data_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_data_TREADY\" :  \"" << in_data_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TKEEP\" :  \"" << in_data_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TSTRB\" :  \"" << in_data_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TUSER\" :  \"" << in_data_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TLAST\" :  \"" << in_data_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TID\" :  \"" << in_data_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_data_TDEST\" :  \"" << in_data_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TDATA\" :  \"" << out_data_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TVALID\" :  \"" << out_data_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_data_TREADY\" :  \"" << out_data_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TKEEP\" :  \"" << out_data_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TSTRB\" :  \"" << out_data_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TUSER\" :  \"" << out_data_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TLAST\" :  \"" << out_data_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TID\" :  \"" << out_data_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_TDEST\" :  \"" << out_data_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


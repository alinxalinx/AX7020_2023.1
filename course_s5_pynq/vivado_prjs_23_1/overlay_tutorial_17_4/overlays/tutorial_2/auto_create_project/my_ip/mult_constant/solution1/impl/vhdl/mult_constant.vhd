-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mult_constant is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_data_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_TVALID : IN STD_LOGIC;
    in_data_TREADY : OUT STD_LOGIC;
    in_data_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_data_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_data_TVALID : OUT STD_LOGIC;
    out_data_TREADY : IN STD_LOGIC;
    out_data_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of mult_constant is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mult_constant,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=412,HLS_SYN_LUT=849}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_data_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_data_V_0_vld_in : STD_LOGIC;
    signal in_data_data_V_0_vld_out : STD_LOGIC;
    signal in_data_data_V_0_ack_in : STD_LOGIC;
    signal in_data_data_V_0_ack_out : STD_LOGIC;
    signal in_data_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_data_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_data_data_V_0_sel : STD_LOGIC;
    signal in_data_data_V_0_load_A : STD_LOGIC;
    signal in_data_data_V_0_load_B : STD_LOGIC;
    signal in_data_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_data_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_data_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal in_data_keep_V_0_vld_in : STD_LOGIC;
    signal in_data_keep_V_0_vld_out : STD_LOGIC;
    signal in_data_keep_V_0_ack_in : STD_LOGIC;
    signal in_data_keep_V_0_ack_out : STD_LOGIC;
    signal in_data_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal in_data_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal in_data_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal in_data_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal in_data_keep_V_0_sel : STD_LOGIC;
    signal in_data_keep_V_0_load_A : STD_LOGIC;
    signal in_data_keep_V_0_load_B : STD_LOGIC;
    signal in_data_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_data_keep_V_0_state_cmp_full : STD_LOGIC;
    signal in_data_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal in_data_strb_V_0_vld_in : STD_LOGIC;
    signal in_data_strb_V_0_vld_out : STD_LOGIC;
    signal in_data_strb_V_0_ack_in : STD_LOGIC;
    signal in_data_strb_V_0_ack_out : STD_LOGIC;
    signal in_data_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal in_data_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal in_data_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal in_data_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal in_data_strb_V_0_sel : STD_LOGIC;
    signal in_data_strb_V_0_load_A : STD_LOGIC;
    signal in_data_strb_V_0_load_B : STD_LOGIC;
    signal in_data_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_data_strb_V_0_state_cmp_full : STD_LOGIC;
    signal in_data_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_user_V_0_vld_in : STD_LOGIC;
    signal in_data_user_V_0_vld_out : STD_LOGIC;
    signal in_data_user_V_0_ack_in : STD_LOGIC;
    signal in_data_user_V_0_ack_out : STD_LOGIC;
    signal in_data_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_user_V_0_sel_rd : STD_LOGIC := '0';
    signal in_data_user_V_0_sel_wr : STD_LOGIC := '0';
    signal in_data_user_V_0_sel : STD_LOGIC;
    signal in_data_user_V_0_load_A : STD_LOGIC;
    signal in_data_user_V_0_load_B : STD_LOGIC;
    signal in_data_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_data_user_V_0_state_cmp_full : STD_LOGIC;
    signal in_data_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_last_V_0_vld_in : STD_LOGIC;
    signal in_data_last_V_0_vld_out : STD_LOGIC;
    signal in_data_last_V_0_ack_in : STD_LOGIC;
    signal in_data_last_V_0_ack_out : STD_LOGIC;
    signal in_data_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_last_V_0_sel_rd : STD_LOGIC := '0';
    signal in_data_last_V_0_sel_wr : STD_LOGIC := '0';
    signal in_data_last_V_0_sel : STD_LOGIC;
    signal in_data_last_V_0_load_A : STD_LOGIC;
    signal in_data_last_V_0_load_B : STD_LOGIC;
    signal in_data_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_data_last_V_0_state_cmp_full : STD_LOGIC;
    signal in_data_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_id_V_0_vld_in : STD_LOGIC;
    signal in_data_id_V_0_vld_out : STD_LOGIC;
    signal in_data_id_V_0_ack_in : STD_LOGIC;
    signal in_data_id_V_0_ack_out : STD_LOGIC;
    signal in_data_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_id_V_0_sel_rd : STD_LOGIC := '0';
    signal in_data_id_V_0_sel_wr : STD_LOGIC := '0';
    signal in_data_id_V_0_sel : STD_LOGIC;
    signal in_data_id_V_0_load_A : STD_LOGIC;
    signal in_data_id_V_0_load_B : STD_LOGIC;
    signal in_data_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_data_id_V_0_state_cmp_full : STD_LOGIC;
    signal in_data_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_dest_V_0_vld_in : STD_LOGIC;
    signal in_data_dest_V_0_vld_out : STD_LOGIC;
    signal in_data_dest_V_0_ack_in : STD_LOGIC;
    signal in_data_dest_V_0_ack_out : STD_LOGIC;
    signal in_data_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal in_data_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal in_data_dest_V_0_sel : STD_LOGIC;
    signal in_data_dest_V_0_load_A : STD_LOGIC;
    signal in_data_dest_V_0_load_B : STD_LOGIC;
    signal in_data_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_data_dest_V_0_state_cmp_full : STD_LOGIC;
    signal out_data_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_data_V_1_vld_in : STD_LOGIC;
    signal out_data_data_V_1_vld_out : STD_LOGIC;
    signal out_data_data_V_1_ack_in : STD_LOGIC;
    signal out_data_data_V_1_ack_out : STD_LOGIC;
    signal out_data_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_data_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_data_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_data_data_V_1_sel : STD_LOGIC;
    signal out_data_data_V_1_load_A : STD_LOGIC;
    signal out_data_data_V_1_load_B : STD_LOGIC;
    signal out_data_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_data_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_data_keep_V_1_vld_in : STD_LOGIC;
    signal out_data_keep_V_1_vld_out : STD_LOGIC;
    signal out_data_keep_V_1_ack_in : STD_LOGIC;
    signal out_data_keep_V_1_ack_out : STD_LOGIC;
    signal out_data_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal out_data_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal out_data_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal out_data_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal out_data_keep_V_1_sel : STD_LOGIC;
    signal out_data_keep_V_1_load_A : STD_LOGIC;
    signal out_data_keep_V_1_load_B : STD_LOGIC;
    signal out_data_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_keep_V_1_state_cmp_full : STD_LOGIC;
    signal out_data_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal out_data_strb_V_1_vld_in : STD_LOGIC;
    signal out_data_strb_V_1_vld_out : STD_LOGIC;
    signal out_data_strb_V_1_ack_in : STD_LOGIC;
    signal out_data_strb_V_1_ack_out : STD_LOGIC;
    signal out_data_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal out_data_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal out_data_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal out_data_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal out_data_strb_V_1_sel : STD_LOGIC;
    signal out_data_strb_V_1_load_A : STD_LOGIC;
    signal out_data_strb_V_1_load_B : STD_LOGIC;
    signal out_data_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_strb_V_1_state_cmp_full : STD_LOGIC;
    signal out_data_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_user_V_1_vld_in : STD_LOGIC;
    signal out_data_user_V_1_vld_out : STD_LOGIC;
    signal out_data_user_V_1_ack_in : STD_LOGIC;
    signal out_data_user_V_1_ack_out : STD_LOGIC;
    signal out_data_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_data_user_V_1_sel_wr : STD_LOGIC := '0';
    signal out_data_user_V_1_sel : STD_LOGIC;
    signal out_data_user_V_1_load_A : STD_LOGIC;
    signal out_data_user_V_1_load_B : STD_LOGIC;
    signal out_data_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_user_V_1_state_cmp_full : STD_LOGIC;
    signal out_data_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_last_V_1_vld_in : STD_LOGIC;
    signal out_data_last_V_1_vld_out : STD_LOGIC;
    signal out_data_last_V_1_ack_in : STD_LOGIC;
    signal out_data_last_V_1_ack_out : STD_LOGIC;
    signal out_data_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_data_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_data_last_V_1_sel : STD_LOGIC;
    signal out_data_last_V_1_load_A : STD_LOGIC;
    signal out_data_last_V_1_load_B : STD_LOGIC;
    signal out_data_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_last_V_1_state_cmp_full : STD_LOGIC;
    signal out_data_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_id_V_1_vld_in : STD_LOGIC;
    signal out_data_id_V_1_vld_out : STD_LOGIC;
    signal out_data_id_V_1_ack_in : STD_LOGIC;
    signal out_data_id_V_1_ack_out : STD_LOGIC;
    signal out_data_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_data_id_V_1_sel_wr : STD_LOGIC := '0';
    signal out_data_id_V_1_sel : STD_LOGIC;
    signal out_data_id_V_1_load_A : STD_LOGIC;
    signal out_data_id_V_1_load_B : STD_LOGIC;
    signal out_data_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_id_V_1_state_cmp_full : STD_LOGIC;
    signal out_data_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_dest_V_1_vld_in : STD_LOGIC;
    signal out_data_dest_V_1_vld_out : STD_LOGIC;
    signal out_data_dest_V_1_ack_in : STD_LOGIC;
    signal out_data_dest_V_1_ack_out : STD_LOGIC;
    signal out_data_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_data_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal out_data_dest_V_1_sel : STD_LOGIC;
    signal out_data_dest_V_1_load_A : STD_LOGIC;
    signal out_data_dest_V_1_load_B : STD_LOGIC;
    signal out_data_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_data_dest_V_1_state_cmp_full : STD_LOGIC;
    signal constant_V : STD_LOGIC_VECTOR (31 downto 0);
    signal constant_V_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal constant_V_0_vld_reg : STD_LOGIC := '0';
    signal constant_V_0_ack_out : STD_LOGIC;
    signal in_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal constant_V_read_reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_data_V_tmp_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_keep_V_tmp_reg_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_data_strb_V_tmp_reg_155 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_data_user_V_tmp_reg_160 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_last_V_tmp_reg_165 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_id_V_tmp_reg_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_data_dest_V_tmp_reg_175 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_data_V_tmp_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component mult_constant_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        constant_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mult_constant_AXILiteS_s_axi_U : component mult_constant_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        constant_V => constant_V);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_data_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_data_data_V_0_ack_out = ap_const_logic_1) and (in_data_data_V_0_vld_out = ap_const_logic_1))) then 
                                        in_data_data_V_0_sel_rd <= not(in_data_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_data_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_data_data_V_0_ack_in = ap_const_logic_1) and (in_data_data_V_0_vld_in = ap_const_logic_1))) then 
                                        in_data_data_V_0_sel_wr <= not(in_data_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_data_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_data_data_V_0_vld_in = ap_const_logic_0) and (in_data_data_V_0_state = ap_const_lv2_2)) or ((in_data_data_V_0_vld_in = ap_const_logic_0) and (in_data_data_V_0_state = ap_const_lv2_3) and (in_data_data_V_0_ack_out = ap_const_logic_1)))) then 
                    in_data_data_V_0_state <= ap_const_lv2_2;
                elsif ((((in_data_data_V_0_ack_out = ap_const_logic_0) and (in_data_data_V_0_state = ap_const_lv2_1)) or ((in_data_data_V_0_ack_out = ap_const_logic_0) and (in_data_data_V_0_state = ap_const_lv2_3) and (in_data_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_data_data_V_0_vld_in = ap_const_logic_0) and (in_data_data_V_0_ack_out = ap_const_logic_1))) and not(((in_data_data_V_0_ack_out = ap_const_logic_0) and (in_data_data_V_0_vld_in = ap_const_logic_1))) and (in_data_data_V_0_state = ap_const_lv2_3)) or ((in_data_data_V_0_state = ap_const_lv2_1) and (in_data_data_V_0_ack_out = ap_const_logic_1)) or ((in_data_data_V_0_state = ap_const_lv2_2) and (in_data_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_data_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_data_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_data_dest_V_0_ack_out = ap_const_logic_1) and (in_data_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        in_data_dest_V_0_sel_rd <= not(in_data_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_data_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_data_dest_V_0_ack_in = ap_const_logic_1) and (in_data_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        in_data_dest_V_0_sel_wr <= not(in_data_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_data_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_data_dest_V_0_state = ap_const_lv2_2) and (in_data_dest_V_0_vld_in = ap_const_logic_0)) or ((in_data_dest_V_0_state = ap_const_lv2_3) and (in_data_dest_V_0_vld_in = ap_const_logic_0) and (in_data_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    in_data_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((in_data_dest_V_0_state = ap_const_lv2_1) and (in_data_dest_V_0_ack_out = ap_const_logic_0)) or ((in_data_dest_V_0_state = ap_const_lv2_3) and (in_data_dest_V_0_ack_out = ap_const_logic_0) and (in_data_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_data_dest_V_0_vld_in = ap_const_logic_0) and (in_data_dest_V_0_ack_out = ap_const_logic_1))) and not(((in_data_dest_V_0_ack_out = ap_const_logic_0) and (in_data_dest_V_0_vld_in = ap_const_logic_1))) and (in_data_dest_V_0_state = ap_const_lv2_3)) or ((in_data_dest_V_0_state = ap_const_lv2_1) and (in_data_dest_V_0_ack_out = ap_const_logic_1)) or ((in_data_dest_V_0_state = ap_const_lv2_2) and (in_data_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_dest_V_0_state <= ap_const_lv2_3;
                else 
                    in_data_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_data_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_data_id_V_0_ack_out = ap_const_logic_1) and (in_data_id_V_0_vld_out = ap_const_logic_1))) then 
                                        in_data_id_V_0_sel_rd <= not(in_data_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_data_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_data_id_V_0_ack_in = ap_const_logic_1) and (in_data_id_V_0_vld_in = ap_const_logic_1))) then 
                                        in_data_id_V_0_sel_wr <= not(in_data_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_data_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_data_id_V_0_state = ap_const_lv2_2) and (in_data_id_V_0_vld_in = ap_const_logic_0)) or ((in_data_id_V_0_state = ap_const_lv2_3) and (in_data_id_V_0_vld_in = ap_const_logic_0) and (in_data_id_V_0_ack_out = ap_const_logic_1)))) then 
                    in_data_id_V_0_state <= ap_const_lv2_2;
                elsif ((((in_data_id_V_0_state = ap_const_lv2_1) and (in_data_id_V_0_ack_out = ap_const_logic_0)) or ((in_data_id_V_0_state = ap_const_lv2_3) and (in_data_id_V_0_ack_out = ap_const_logic_0) and (in_data_id_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_data_id_V_0_vld_in = ap_const_logic_0) and (in_data_id_V_0_ack_out = ap_const_logic_1))) and not(((in_data_id_V_0_ack_out = ap_const_logic_0) and (in_data_id_V_0_vld_in = ap_const_logic_1))) and (in_data_id_V_0_state = ap_const_lv2_3)) or ((in_data_id_V_0_state = ap_const_lv2_1) and (in_data_id_V_0_ack_out = ap_const_logic_1)) or ((in_data_id_V_0_state = ap_const_lv2_2) and (in_data_id_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_id_V_0_state <= ap_const_lv2_3;
                else 
                    in_data_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_data_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_data_keep_V_0_ack_out = ap_const_logic_1) and (in_data_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        in_data_keep_V_0_sel_rd <= not(in_data_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_data_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_data_keep_V_0_ack_in = ap_const_logic_1) and (in_data_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        in_data_keep_V_0_sel_wr <= not(in_data_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_data_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_data_keep_V_0_state = ap_const_lv2_2) and (in_data_keep_V_0_vld_in = ap_const_logic_0)) or ((in_data_keep_V_0_state = ap_const_lv2_3) and (in_data_keep_V_0_vld_in = ap_const_logic_0) and (in_data_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    in_data_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((in_data_keep_V_0_state = ap_const_lv2_3) and (in_data_keep_V_0_ack_out = ap_const_logic_0) and (in_data_keep_V_0_vld_in = ap_const_logic_1)) or ((in_data_keep_V_0_state = ap_const_lv2_1) and (in_data_keep_V_0_ack_out = ap_const_logic_0)))) then 
                    in_data_keep_V_0_state <= ap_const_lv2_1;
                elsif ((((in_data_keep_V_0_state = ap_const_lv2_2) and (in_data_keep_V_0_vld_in = ap_const_logic_1)) or (not(((in_data_keep_V_0_vld_in = ap_const_logic_0) and (in_data_keep_V_0_ack_out = ap_const_logic_1))) and not(((in_data_keep_V_0_ack_out = ap_const_logic_0) and (in_data_keep_V_0_vld_in = ap_const_logic_1))) and (in_data_keep_V_0_state = ap_const_lv2_3)) or ((in_data_keep_V_0_state = ap_const_lv2_1) and (in_data_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    in_data_keep_V_0_state <= ap_const_lv2_3;
                else 
                    in_data_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_data_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_data_last_V_0_ack_out = ap_const_logic_1) and (in_data_last_V_0_vld_out = ap_const_logic_1))) then 
                                        in_data_last_V_0_sel_rd <= not(in_data_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_data_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_data_last_V_0_ack_in = ap_const_logic_1) and (in_data_last_V_0_vld_in = ap_const_logic_1))) then 
                                        in_data_last_V_0_sel_wr <= not(in_data_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_data_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_data_last_V_0_state = ap_const_lv2_2) and (in_data_last_V_0_vld_in = ap_const_logic_0)) or ((in_data_last_V_0_state = ap_const_lv2_3) and (in_data_last_V_0_vld_in = ap_const_logic_0) and (in_data_last_V_0_ack_out = ap_const_logic_1)))) then 
                    in_data_last_V_0_state <= ap_const_lv2_2;
                elsif ((((in_data_last_V_0_state = ap_const_lv2_1) and (in_data_last_V_0_ack_out = ap_const_logic_0)) or ((in_data_last_V_0_state = ap_const_lv2_3) and (in_data_last_V_0_ack_out = ap_const_logic_0) and (in_data_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_data_last_V_0_vld_in = ap_const_logic_0) and (in_data_last_V_0_ack_out = ap_const_logic_1))) and not(((in_data_last_V_0_ack_out = ap_const_logic_0) and (in_data_last_V_0_vld_in = ap_const_logic_1))) and (in_data_last_V_0_state = ap_const_lv2_3)) or ((in_data_last_V_0_state = ap_const_lv2_1) and (in_data_last_V_0_ack_out = ap_const_logic_1)) or ((in_data_last_V_0_state = ap_const_lv2_2) and (in_data_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_last_V_0_state <= ap_const_lv2_3;
                else 
                    in_data_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_data_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_data_strb_V_0_ack_out = ap_const_logic_1) and (in_data_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        in_data_strb_V_0_sel_rd <= not(in_data_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_data_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_data_strb_V_0_ack_in = ap_const_logic_1) and (in_data_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        in_data_strb_V_0_sel_wr <= not(in_data_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_data_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_data_strb_V_0_state = ap_const_lv2_2) and (in_data_strb_V_0_vld_in = ap_const_logic_0)) or ((in_data_strb_V_0_state = ap_const_lv2_3) and (in_data_strb_V_0_vld_in = ap_const_logic_0) and (in_data_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    in_data_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((in_data_strb_V_0_state = ap_const_lv2_1) and (in_data_strb_V_0_ack_out = ap_const_logic_0)) or ((in_data_strb_V_0_state = ap_const_lv2_3) and (in_data_strb_V_0_ack_out = ap_const_logic_0) and (in_data_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_data_strb_V_0_vld_in = ap_const_logic_0) and (in_data_strb_V_0_ack_out = ap_const_logic_1))) and not(((in_data_strb_V_0_ack_out = ap_const_logic_0) and (in_data_strb_V_0_vld_in = ap_const_logic_1))) and (in_data_strb_V_0_state = ap_const_lv2_3)) or ((in_data_strb_V_0_state = ap_const_lv2_1) and (in_data_strb_V_0_ack_out = ap_const_logic_1)) or ((in_data_strb_V_0_state = ap_const_lv2_2) and (in_data_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_strb_V_0_state <= ap_const_lv2_3;
                else 
                    in_data_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_data_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_data_user_V_0_ack_out = ap_const_logic_1) and (in_data_user_V_0_vld_out = ap_const_logic_1))) then 
                                        in_data_user_V_0_sel_rd <= not(in_data_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_data_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_data_user_V_0_ack_in = ap_const_logic_1) and (in_data_user_V_0_vld_in = ap_const_logic_1))) then 
                                        in_data_user_V_0_sel_wr <= not(in_data_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_data_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_data_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_data_user_V_0_state = ap_const_lv2_2) and (in_data_user_V_0_vld_in = ap_const_logic_0)) or ((in_data_user_V_0_state = ap_const_lv2_3) and (in_data_user_V_0_vld_in = ap_const_logic_0) and (in_data_user_V_0_ack_out = ap_const_logic_1)))) then 
                    in_data_user_V_0_state <= ap_const_lv2_2;
                elsif ((((in_data_user_V_0_state = ap_const_lv2_1) and (in_data_user_V_0_ack_out = ap_const_logic_0)) or ((in_data_user_V_0_state = ap_const_lv2_3) and (in_data_user_V_0_ack_out = ap_const_logic_0) and (in_data_user_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_data_user_V_0_vld_in = ap_const_logic_0) and (in_data_user_V_0_ack_out = ap_const_logic_1))) and not(((in_data_user_V_0_ack_out = ap_const_logic_0) and (in_data_user_V_0_vld_in = ap_const_logic_1))) and (in_data_user_V_0_state = ap_const_lv2_3)) or ((in_data_user_V_0_state = ap_const_lv2_1) and (in_data_user_V_0_ack_out = ap_const_logic_1)) or ((in_data_user_V_0_state = ap_const_lv2_2) and (in_data_user_V_0_vld_in = ap_const_logic_1)))) then 
                    in_data_user_V_0_state <= ap_const_lv2_3;
                else 
                    in_data_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_data_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_data_data_V_1_ack_out = ap_const_logic_1) and (out_data_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_data_data_V_1_sel_rd <= not(out_data_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_data_data_V_1_ack_in = ap_const_logic_1) and (out_data_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_data_data_V_1_sel_wr <= not(out_data_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_data_data_V_1_state = ap_const_lv2_2) and (out_data_data_V_1_vld_in = ap_const_logic_0)) or ((out_data_data_V_1_state = ap_const_lv2_3) and (out_data_data_V_1_vld_in = ap_const_logic_0) and (out_data_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_data_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_data_data_V_1_state = ap_const_lv2_1) and (out_data_data_V_1_ack_out = ap_const_logic_0)) or ((out_data_data_V_1_state = ap_const_lv2_3) and (out_data_data_V_1_ack_out = ap_const_logic_0) and (out_data_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_data_data_V_1_vld_in = ap_const_logic_0) and (out_data_data_V_1_ack_out = ap_const_logic_1))) and not(((out_data_data_V_1_ack_out = ap_const_logic_0) and (out_data_data_V_1_vld_in = ap_const_logic_1))) and (out_data_data_V_1_state = ap_const_lv2_3)) or ((out_data_data_V_1_state = ap_const_lv2_1) and (out_data_data_V_1_ack_out = ap_const_logic_1)) or ((out_data_data_V_1_state = ap_const_lv2_2) and (out_data_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_data_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_data_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_data_dest_V_1_ack_out = ap_const_logic_1) and (out_data_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        out_data_dest_V_1_sel_rd <= not(out_data_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_data_dest_V_1_ack_in = ap_const_logic_1) and (out_data_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        out_data_dest_V_1_sel_wr <= not(out_data_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_data_dest_V_1_state = ap_const_lv2_2) and (out_data_dest_V_1_vld_in = ap_const_logic_0)) or ((out_data_dest_V_1_state = ap_const_lv2_3) and (out_data_dest_V_1_vld_in = ap_const_logic_0) and (out_data_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    out_data_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((out_data_dest_V_1_state = ap_const_lv2_1) and (out_data_dest_V_1_ack_out = ap_const_logic_0)) or ((out_data_dest_V_1_state = ap_const_lv2_3) and (out_data_dest_V_1_ack_out = ap_const_logic_0) and (out_data_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_data_dest_V_1_vld_in = ap_const_logic_0) and (out_data_dest_V_1_ack_out = ap_const_logic_1))) and not(((out_data_dest_V_1_ack_out = ap_const_logic_0) and (out_data_dest_V_1_vld_in = ap_const_logic_1))) and (out_data_dest_V_1_state = ap_const_lv2_3)) or ((out_data_dest_V_1_state = ap_const_lv2_1) and (out_data_dest_V_1_ack_out = ap_const_logic_1)) or ((out_data_dest_V_1_state = ap_const_lv2_2) and (out_data_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_data_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_data_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_data_id_V_1_ack_out = ap_const_logic_1) and (out_data_id_V_1_vld_out = ap_const_logic_1))) then 
                                        out_data_id_V_1_sel_rd <= not(out_data_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_data_id_V_1_ack_in = ap_const_logic_1) and (out_data_id_V_1_vld_in = ap_const_logic_1))) then 
                                        out_data_id_V_1_sel_wr <= not(out_data_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_data_id_V_1_state = ap_const_lv2_2) and (out_data_id_V_1_vld_in = ap_const_logic_0)) or ((out_data_id_V_1_state = ap_const_lv2_3) and (out_data_id_V_1_vld_in = ap_const_logic_0) and (out_data_id_V_1_ack_out = ap_const_logic_1)))) then 
                    out_data_id_V_1_state <= ap_const_lv2_2;
                elsif ((((out_data_id_V_1_state = ap_const_lv2_1) and (out_data_id_V_1_ack_out = ap_const_logic_0)) or ((out_data_id_V_1_state = ap_const_lv2_3) and (out_data_id_V_1_ack_out = ap_const_logic_0) and (out_data_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_data_id_V_1_vld_in = ap_const_logic_0) and (out_data_id_V_1_ack_out = ap_const_logic_1))) and not(((out_data_id_V_1_ack_out = ap_const_logic_0) and (out_data_id_V_1_vld_in = ap_const_logic_1))) and (out_data_id_V_1_state = ap_const_lv2_3)) or ((out_data_id_V_1_state = ap_const_lv2_1) and (out_data_id_V_1_ack_out = ap_const_logic_1)) or ((out_data_id_V_1_state = ap_const_lv2_2) and (out_data_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_data_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_data_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_data_keep_V_1_ack_out = ap_const_logic_1) and (out_data_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        out_data_keep_V_1_sel_rd <= not(out_data_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_data_keep_V_1_ack_in = ap_const_logic_1) and (out_data_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        out_data_keep_V_1_sel_wr <= not(out_data_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_data_keep_V_1_state = ap_const_lv2_2) and (out_data_keep_V_1_vld_in = ap_const_logic_0)) or ((out_data_keep_V_1_state = ap_const_lv2_3) and (out_data_keep_V_1_vld_in = ap_const_logic_0) and (out_data_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    out_data_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((out_data_keep_V_1_state = ap_const_lv2_1) and (out_data_keep_V_1_ack_out = ap_const_logic_0)) or ((out_data_keep_V_1_state = ap_const_lv2_3) and (out_data_keep_V_1_ack_out = ap_const_logic_0) and (out_data_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_data_keep_V_1_vld_in = ap_const_logic_0) and (out_data_keep_V_1_ack_out = ap_const_logic_1))) and not(((out_data_keep_V_1_ack_out = ap_const_logic_0) and (out_data_keep_V_1_vld_in = ap_const_logic_1))) and (out_data_keep_V_1_state = ap_const_lv2_3)) or ((out_data_keep_V_1_state = ap_const_lv2_1) and (out_data_keep_V_1_ack_out = ap_const_logic_1)) or ((out_data_keep_V_1_state = ap_const_lv2_2) and (out_data_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_keep_V_1_state <= ap_const_lv2_3;
                else 
                    out_data_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_data_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_data_last_V_1_ack_out = ap_const_logic_1) and (out_data_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_data_last_V_1_sel_rd <= not(out_data_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_data_last_V_1_ack_in = ap_const_logic_1) and (out_data_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_data_last_V_1_sel_wr <= not(out_data_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_data_last_V_1_state = ap_const_lv2_2) and (out_data_last_V_1_vld_in = ap_const_logic_0)) or ((out_data_last_V_1_state = ap_const_lv2_3) and (out_data_last_V_1_vld_in = ap_const_logic_0) and (out_data_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_data_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_data_last_V_1_state = ap_const_lv2_1) and (out_data_last_V_1_ack_out = ap_const_logic_0)) or ((out_data_last_V_1_state = ap_const_lv2_3) and (out_data_last_V_1_ack_out = ap_const_logic_0) and (out_data_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_data_last_V_1_vld_in = ap_const_logic_0) and (out_data_last_V_1_ack_out = ap_const_logic_1))) and not(((out_data_last_V_1_ack_out = ap_const_logic_0) and (out_data_last_V_1_vld_in = ap_const_logic_1))) and (out_data_last_V_1_state = ap_const_lv2_3)) or ((out_data_last_V_1_state = ap_const_lv2_1) and (out_data_last_V_1_ack_out = ap_const_logic_1)) or ((out_data_last_V_1_state = ap_const_lv2_2) and (out_data_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_data_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_data_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_data_strb_V_1_ack_out = ap_const_logic_1) and (out_data_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        out_data_strb_V_1_sel_rd <= not(out_data_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_data_strb_V_1_ack_in = ap_const_logic_1) and (out_data_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        out_data_strb_V_1_sel_wr <= not(out_data_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_data_strb_V_1_state = ap_const_lv2_2) and (out_data_strb_V_1_vld_in = ap_const_logic_0)) or ((out_data_strb_V_1_state = ap_const_lv2_3) and (out_data_strb_V_1_vld_in = ap_const_logic_0) and (out_data_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    out_data_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((out_data_strb_V_1_state = ap_const_lv2_1) and (out_data_strb_V_1_ack_out = ap_const_logic_0)) or ((out_data_strb_V_1_state = ap_const_lv2_3) and (out_data_strb_V_1_ack_out = ap_const_logic_0) and (out_data_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_data_strb_V_1_vld_in = ap_const_logic_0) and (out_data_strb_V_1_ack_out = ap_const_logic_1))) and not(((out_data_strb_V_1_ack_out = ap_const_logic_0) and (out_data_strb_V_1_vld_in = ap_const_logic_1))) and (out_data_strb_V_1_state = ap_const_lv2_3)) or ((out_data_strb_V_1_state = ap_const_lv2_1) and (out_data_strb_V_1_ack_out = ap_const_logic_1)) or ((out_data_strb_V_1_state = ap_const_lv2_2) and (out_data_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_strb_V_1_state <= ap_const_lv2_3;
                else 
                    out_data_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_data_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_data_user_V_1_ack_out = ap_const_logic_1) and (out_data_user_V_1_vld_out = ap_const_logic_1))) then 
                                        out_data_user_V_1_sel_rd <= not(out_data_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_data_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_data_user_V_1_ack_in = ap_const_logic_1) and (out_data_user_V_1_vld_in = ap_const_logic_1))) then 
                                        out_data_user_V_1_sel_wr <= not(out_data_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_data_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_data_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_data_user_V_1_state = ap_const_lv2_2) and (out_data_user_V_1_vld_in = ap_const_logic_0)) or ((out_data_user_V_1_state = ap_const_lv2_3) and (out_data_user_V_1_vld_in = ap_const_logic_0) and (out_data_user_V_1_ack_out = ap_const_logic_1)))) then 
                    out_data_user_V_1_state <= ap_const_lv2_2;
                elsif ((((out_data_user_V_1_state = ap_const_lv2_1) and (out_data_user_V_1_ack_out = ap_const_logic_0)) or ((out_data_user_V_1_state = ap_const_lv2_3) and (out_data_user_V_1_ack_out = ap_const_logic_0) and (out_data_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_data_user_V_1_vld_in = ap_const_logic_0) and (out_data_user_V_1_ack_out = ap_const_logic_1))) and not(((out_data_user_V_1_ack_out = ap_const_logic_0) and (out_data_user_V_1_vld_in = ap_const_logic_1))) and (out_data_user_V_1_state = ap_const_lv2_3)) or ((out_data_user_V_1_state = ap_const_lv2_1) and (out_data_user_V_1_ack_out = ap_const_logic_1)) or ((out_data_user_V_1_state = ap_const_lv2_2) and (out_data_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_data_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_data_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    constant_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((constant_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((constant_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (constant_V_0_vld_reg = ap_const_logic_1)))) then
                constant_V_0_data_reg <= constant_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_data_data_V_0_vld_out = ap_const_logic_1))) then
                constant_V_read_reg_140 <= constant_V_0_data_reg;
                in_data_data_V_tmp_reg_145 <= in_data_data_V_0_data_out;
                in_data_dest_V_tmp_reg_175 <= in_data_dest_V_0_data_out;
                in_data_id_V_tmp_reg_170 <= in_data_id_V_0_data_out;
                in_data_keep_V_tmp_reg_150 <= in_data_keep_V_0_data_out;
                in_data_last_V_tmp_reg_165 <= in_data_last_V_0_data_out;
                in_data_strb_V_tmp_reg_155 <= in_data_strb_V_0_data_out;
                in_data_user_V_tmp_reg_160 <= in_data_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_data_V_0_load_A = ap_const_logic_1)) then
                in_data_data_V_0_payload_A <= in_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_data_V_0_load_B = ap_const_logic_1)) then
                in_data_data_V_0_payload_B <= in_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_dest_V_0_load_A = ap_const_logic_1)) then
                in_data_dest_V_0_payload_A <= in_data_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_dest_V_0_load_B = ap_const_logic_1)) then
                in_data_dest_V_0_payload_B <= in_data_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_id_V_0_load_A = ap_const_logic_1)) then
                in_data_id_V_0_payload_A <= in_data_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_id_V_0_load_B = ap_const_logic_1)) then
                in_data_id_V_0_payload_B <= in_data_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_keep_V_0_load_A = ap_const_logic_1)) then
                in_data_keep_V_0_payload_A <= in_data_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_keep_V_0_load_B = ap_const_logic_1)) then
                in_data_keep_V_0_payload_B <= in_data_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_last_V_0_load_A = ap_const_logic_1)) then
                in_data_last_V_0_payload_A <= in_data_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_last_V_0_load_B = ap_const_logic_1)) then
                in_data_last_V_0_payload_B <= in_data_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_strb_V_0_load_A = ap_const_logic_1)) then
                in_data_strb_V_0_payload_A <= in_data_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_strb_V_0_load_B = ap_const_logic_1)) then
                in_data_strb_V_0_payload_B <= in_data_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_user_V_0_load_A = ap_const_logic_1)) then
                in_data_user_V_0_payload_A <= in_data_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_data_user_V_0_load_B = ap_const_logic_1)) then
                in_data_user_V_0_payload_B <= in_data_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_data_V_1_load_A = ap_const_logic_1)) then
                out_data_data_V_1_payload_A <= out_data_data_V_tmp_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_data_V_1_load_B = ap_const_logic_1)) then
                out_data_data_V_1_payload_B <= out_data_data_V_tmp_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_dest_V_1_load_A = ap_const_logic_1)) then
                out_data_dest_V_1_payload_A <= in_data_dest_V_tmp_reg_175;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_dest_V_1_load_B = ap_const_logic_1)) then
                out_data_dest_V_1_payload_B <= in_data_dest_V_tmp_reg_175;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_id_V_1_load_A = ap_const_logic_1)) then
                out_data_id_V_1_payload_A <= in_data_id_V_tmp_reg_170;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_id_V_1_load_B = ap_const_logic_1)) then
                out_data_id_V_1_payload_B <= in_data_id_V_tmp_reg_170;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_keep_V_1_load_A = ap_const_logic_1)) then
                out_data_keep_V_1_payload_A <= in_data_keep_V_tmp_reg_150;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_keep_V_1_load_B = ap_const_logic_1)) then
                out_data_keep_V_1_payload_B <= in_data_keep_V_tmp_reg_150;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_last_V_1_load_A = ap_const_logic_1)) then
                out_data_last_V_1_payload_A <= in_data_last_V_tmp_reg_165;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_last_V_1_load_B = ap_const_logic_1)) then
                out_data_last_V_1_payload_B <= in_data_last_V_tmp_reg_165;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_strb_V_1_load_A = ap_const_logic_1)) then
                out_data_strb_V_1_payload_A <= in_data_strb_V_tmp_reg_155;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_strb_V_1_load_B = ap_const_logic_1)) then
                out_data_strb_V_1_payload_B <= in_data_strb_V_tmp_reg_155;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_user_V_1_load_A = ap_const_logic_1)) then
                out_data_user_V_1_payload_A <= in_data_user_V_tmp_reg_160;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_data_user_V_1_load_B = ap_const_logic_1)) then
                out_data_user_V_1_payload_B <= in_data_user_V_tmp_reg_160;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (in_data_data_V_0_vld_out, out_data_data_V_1_ack_in, out_data_keep_V_1_ack_in, out_data_strb_V_1_ack_in, out_data_user_V_1_ack_in, out_data_last_V_1_ack_in, out_data_id_V_1_ack_in, out_data_dest_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_data_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((out_data_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((out_data_dest_V_1_ack_in = ap_const_logic_0) or (out_data_id_V_1_ack_in = ap_const_logic_0) or (out_data_last_V_1_ack_in = ap_const_logic_0) or (out_data_user_V_1_ack_in = ap_const_logic_0) or (out_data_strb_V_1_ack_in = ap_const_logic_0) or (out_data_keep_V_1_ack_in = ap_const_logic_0) or (out_data_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state4_assign_proc : process(out_data_data_V_1_ack_in, out_data_keep_V_1_ack_in, out_data_strb_V_1_ack_in, out_data_user_V_1_ack_in, out_data_last_V_1_ack_in, out_data_id_V_1_ack_in, out_data_dest_V_1_ack_in)
    begin
                ap_block_state4 <= ((out_data_dest_V_1_ack_in = ap_const_logic_0) or (out_data_id_V_1_ack_in = ap_const_logic_0) or (out_data_last_V_1_ack_in = ap_const_logic_0) or (out_data_user_V_1_ack_in = ap_const_logic_0) or (out_data_strb_V_1_ack_in = ap_const_logic_0) or (out_data_keep_V_1_ack_in = ap_const_logic_0) or (out_data_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    constant_V_0_ack_out_assign_proc : process(out_data_data_V_1_ack_in, out_data_keep_V_1_ack_in, out_data_strb_V_1_ack_in, out_data_user_V_1_ack_in, out_data_last_V_1_ack_in, out_data_id_V_1_ack_in, out_data_dest_V_1_ack_in, ap_CS_fsm_state4)
    begin
        if ((not(((out_data_dest_V_1_ack_in = ap_const_logic_0) or (out_data_id_V_1_ack_in = ap_const_logic_0) or (out_data_last_V_1_ack_in = ap_const_logic_0) or (out_data_user_V_1_ack_in = ap_const_logic_0) or (out_data_strb_V_1_ack_in = ap_const_logic_0) or (out_data_keep_V_1_ack_in = ap_const_logic_0) or (out_data_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            constant_V_0_ack_out <= ap_const_logic_1;
        else 
            constant_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_TDATA_blk_n_assign_proc : process(in_data_data_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_data_TDATA_blk_n <= in_data_data_V_0_state(0);
        else 
            in_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_data_TREADY <= in_data_dest_V_0_state(1);
    in_data_data_V_0_ack_in <= in_data_data_V_0_state(1);

    in_data_data_V_0_ack_out_assign_proc : process(in_data_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_data_data_V_0_vld_out = ap_const_logic_1))) then 
            in_data_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_data_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_data_V_0_data_out_assign_proc : process(in_data_data_V_0_payload_A, in_data_data_V_0_payload_B, in_data_data_V_0_sel)
    begin
        if ((in_data_data_V_0_sel = ap_const_logic_1)) then 
            in_data_data_V_0_data_out <= in_data_data_V_0_payload_B;
        else 
            in_data_data_V_0_data_out <= in_data_data_V_0_payload_A;
        end if; 
    end process;

    in_data_data_V_0_load_A <= (in_data_data_V_0_state_cmp_full and not(in_data_data_V_0_sel_wr));
    in_data_data_V_0_load_B <= (in_data_data_V_0_state_cmp_full and in_data_data_V_0_sel_wr);
    in_data_data_V_0_sel <= in_data_data_V_0_sel_rd;
    in_data_data_V_0_state_cmp_full <= '0' when (in_data_data_V_0_state = ap_const_lv2_1) else '1';
    in_data_data_V_0_vld_in <= in_data_TVALID;
    in_data_data_V_0_vld_out <= in_data_data_V_0_state(0);
    in_data_dest_V_0_ack_in <= in_data_dest_V_0_state(1);

    in_data_dest_V_0_ack_out_assign_proc : process(in_data_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_data_data_V_0_vld_out = ap_const_logic_1))) then 
            in_data_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            in_data_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_dest_V_0_data_out_assign_proc : process(in_data_dest_V_0_payload_A, in_data_dest_V_0_payload_B, in_data_dest_V_0_sel)
    begin
        if ((in_data_dest_V_0_sel = ap_const_logic_1)) then 
            in_data_dest_V_0_data_out <= in_data_dest_V_0_payload_B;
        else 
            in_data_dest_V_0_data_out <= in_data_dest_V_0_payload_A;
        end if; 
    end process;

    in_data_dest_V_0_load_A <= (in_data_dest_V_0_state_cmp_full and not(in_data_dest_V_0_sel_wr));
    in_data_dest_V_0_load_B <= (in_data_dest_V_0_state_cmp_full and in_data_dest_V_0_sel_wr);
    in_data_dest_V_0_sel <= in_data_dest_V_0_sel_rd;
    in_data_dest_V_0_state_cmp_full <= '0' when (in_data_dest_V_0_state = ap_const_lv2_1) else '1';
    in_data_dest_V_0_vld_in <= in_data_TVALID;
    in_data_dest_V_0_vld_out <= in_data_dest_V_0_state(0);
    in_data_id_V_0_ack_in <= in_data_id_V_0_state(1);

    in_data_id_V_0_ack_out_assign_proc : process(in_data_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_data_data_V_0_vld_out = ap_const_logic_1))) then 
            in_data_id_V_0_ack_out <= ap_const_logic_1;
        else 
            in_data_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_id_V_0_data_out_assign_proc : process(in_data_id_V_0_payload_A, in_data_id_V_0_payload_B, in_data_id_V_0_sel)
    begin
        if ((in_data_id_V_0_sel = ap_const_logic_1)) then 
            in_data_id_V_0_data_out <= in_data_id_V_0_payload_B;
        else 
            in_data_id_V_0_data_out <= in_data_id_V_0_payload_A;
        end if; 
    end process;

    in_data_id_V_0_load_A <= (in_data_id_V_0_state_cmp_full and not(in_data_id_V_0_sel_wr));
    in_data_id_V_0_load_B <= (in_data_id_V_0_state_cmp_full and in_data_id_V_0_sel_wr);
    in_data_id_V_0_sel <= in_data_id_V_0_sel_rd;
    in_data_id_V_0_state_cmp_full <= '0' when (in_data_id_V_0_state = ap_const_lv2_1) else '1';
    in_data_id_V_0_vld_in <= in_data_TVALID;
    in_data_id_V_0_vld_out <= in_data_id_V_0_state(0);
    in_data_keep_V_0_ack_in <= in_data_keep_V_0_state(1);

    in_data_keep_V_0_ack_out_assign_proc : process(in_data_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_data_data_V_0_vld_out = ap_const_logic_1))) then 
            in_data_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            in_data_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_keep_V_0_data_out_assign_proc : process(in_data_keep_V_0_payload_A, in_data_keep_V_0_payload_B, in_data_keep_V_0_sel)
    begin
        if ((in_data_keep_V_0_sel = ap_const_logic_1)) then 
            in_data_keep_V_0_data_out <= in_data_keep_V_0_payload_B;
        else 
            in_data_keep_V_0_data_out <= in_data_keep_V_0_payload_A;
        end if; 
    end process;

    in_data_keep_V_0_load_A <= (in_data_keep_V_0_state_cmp_full and not(in_data_keep_V_0_sel_wr));
    in_data_keep_V_0_load_B <= (in_data_keep_V_0_state_cmp_full and in_data_keep_V_0_sel_wr);
    in_data_keep_V_0_sel <= in_data_keep_V_0_sel_rd;
    in_data_keep_V_0_state_cmp_full <= '0' when (in_data_keep_V_0_state = ap_const_lv2_1) else '1';
    in_data_keep_V_0_vld_in <= in_data_TVALID;
    in_data_keep_V_0_vld_out <= in_data_keep_V_0_state(0);
    in_data_last_V_0_ack_in <= in_data_last_V_0_state(1);

    in_data_last_V_0_ack_out_assign_proc : process(in_data_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_data_data_V_0_vld_out = ap_const_logic_1))) then 
            in_data_last_V_0_ack_out <= ap_const_logic_1;
        else 
            in_data_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_last_V_0_data_out_assign_proc : process(in_data_last_V_0_payload_A, in_data_last_V_0_payload_B, in_data_last_V_0_sel)
    begin
        if ((in_data_last_V_0_sel = ap_const_logic_1)) then 
            in_data_last_V_0_data_out <= in_data_last_V_0_payload_B;
        else 
            in_data_last_V_0_data_out <= in_data_last_V_0_payload_A;
        end if; 
    end process;

    in_data_last_V_0_load_A <= (in_data_last_V_0_state_cmp_full and not(in_data_last_V_0_sel_wr));
    in_data_last_V_0_load_B <= (in_data_last_V_0_state_cmp_full and in_data_last_V_0_sel_wr);
    in_data_last_V_0_sel <= in_data_last_V_0_sel_rd;
    in_data_last_V_0_state_cmp_full <= '0' when (in_data_last_V_0_state = ap_const_lv2_1) else '1';
    in_data_last_V_0_vld_in <= in_data_TVALID;
    in_data_last_V_0_vld_out <= in_data_last_V_0_state(0);
    in_data_strb_V_0_ack_in <= in_data_strb_V_0_state(1);

    in_data_strb_V_0_ack_out_assign_proc : process(in_data_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_data_data_V_0_vld_out = ap_const_logic_1))) then 
            in_data_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            in_data_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_strb_V_0_data_out_assign_proc : process(in_data_strb_V_0_payload_A, in_data_strb_V_0_payload_B, in_data_strb_V_0_sel)
    begin
        if ((in_data_strb_V_0_sel = ap_const_logic_1)) then 
            in_data_strb_V_0_data_out <= in_data_strb_V_0_payload_B;
        else 
            in_data_strb_V_0_data_out <= in_data_strb_V_0_payload_A;
        end if; 
    end process;

    in_data_strb_V_0_load_A <= (in_data_strb_V_0_state_cmp_full and not(in_data_strb_V_0_sel_wr));
    in_data_strb_V_0_load_B <= (in_data_strb_V_0_state_cmp_full and in_data_strb_V_0_sel_wr);
    in_data_strb_V_0_sel <= in_data_strb_V_0_sel_rd;
    in_data_strb_V_0_state_cmp_full <= '0' when (in_data_strb_V_0_state = ap_const_lv2_1) else '1';
    in_data_strb_V_0_vld_in <= in_data_TVALID;
    in_data_strb_V_0_vld_out <= in_data_strb_V_0_state(0);
    in_data_user_V_0_ack_in <= in_data_user_V_0_state(1);

    in_data_user_V_0_ack_out_assign_proc : process(in_data_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_data_data_V_0_vld_out = ap_const_logic_1))) then 
            in_data_user_V_0_ack_out <= ap_const_logic_1;
        else 
            in_data_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_data_user_V_0_data_out_assign_proc : process(in_data_user_V_0_payload_A, in_data_user_V_0_payload_B, in_data_user_V_0_sel)
    begin
        if ((in_data_user_V_0_sel = ap_const_logic_1)) then 
            in_data_user_V_0_data_out <= in_data_user_V_0_payload_B;
        else 
            in_data_user_V_0_data_out <= in_data_user_V_0_payload_A;
        end if; 
    end process;

    in_data_user_V_0_load_A <= (in_data_user_V_0_state_cmp_full and not(in_data_user_V_0_sel_wr));
    in_data_user_V_0_load_B <= (in_data_user_V_0_state_cmp_full and in_data_user_V_0_sel_wr);
    in_data_user_V_0_sel <= in_data_user_V_0_sel_rd;
    in_data_user_V_0_state_cmp_full <= '0' when (in_data_user_V_0_state = ap_const_lv2_1) else '1';
    in_data_user_V_0_vld_in <= in_data_TVALID;
    in_data_user_V_0_vld_out <= in_data_user_V_0_state(0);
    out_data_TDATA <= out_data_data_V_1_data_out;

    out_data_TDATA_blk_n_assign_proc : process(out_data_data_V_1_state, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_data_TDATA_blk_n <= out_data_data_V_1_state(1);
        else 
            out_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_data_TDEST <= out_data_dest_V_1_data_out;
    out_data_TID <= out_data_id_V_1_data_out;
    out_data_TKEEP <= out_data_keep_V_1_data_out;
    out_data_TLAST <= out_data_last_V_1_data_out;
    out_data_TSTRB <= out_data_strb_V_1_data_out;
    out_data_TUSER <= out_data_user_V_1_data_out;
    out_data_TVALID <= out_data_dest_V_1_state(0);
    out_data_data_V_1_ack_in <= out_data_data_V_1_state(1);
    out_data_data_V_1_ack_out <= out_data_TREADY;

    out_data_data_V_1_data_out_assign_proc : process(out_data_data_V_1_payload_A, out_data_data_V_1_payload_B, out_data_data_V_1_sel)
    begin
        if ((out_data_data_V_1_sel = ap_const_logic_1)) then 
            out_data_data_V_1_data_out <= out_data_data_V_1_payload_B;
        else 
            out_data_data_V_1_data_out <= out_data_data_V_1_payload_A;
        end if; 
    end process;

    out_data_data_V_1_load_A <= (out_data_data_V_1_state_cmp_full and not(out_data_data_V_1_sel_wr));
    out_data_data_V_1_load_B <= (out_data_data_V_1_state_cmp_full and out_data_data_V_1_sel_wr);
    out_data_data_V_1_sel <= out_data_data_V_1_sel_rd;
    out_data_data_V_1_state_cmp_full <= '0' when (out_data_data_V_1_state = ap_const_lv2_1) else '1';

    out_data_data_V_1_vld_in_assign_proc : process(out_data_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if (((out_data_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_data_data_V_1_vld_in <= ap_const_logic_1;
        else 
            out_data_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_data_data_V_1_vld_out <= out_data_data_V_1_state(0);
    out_data_data_V_tmp_fu_135_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(in_data_data_V_tmp_reg_145) * signed(constant_V_read_reg_140))), 32));
    out_data_dest_V_1_ack_in <= out_data_dest_V_1_state(1);
    out_data_dest_V_1_ack_out <= out_data_TREADY;

    out_data_dest_V_1_data_out_assign_proc : process(out_data_dest_V_1_payload_A, out_data_dest_V_1_payload_B, out_data_dest_V_1_sel)
    begin
        if ((out_data_dest_V_1_sel = ap_const_logic_1)) then 
            out_data_dest_V_1_data_out <= out_data_dest_V_1_payload_B;
        else 
            out_data_dest_V_1_data_out <= out_data_dest_V_1_payload_A;
        end if; 
    end process;

    out_data_dest_V_1_load_A <= (out_data_dest_V_1_state_cmp_full and not(out_data_dest_V_1_sel_wr));
    out_data_dest_V_1_load_B <= (out_data_dest_V_1_state_cmp_full and out_data_dest_V_1_sel_wr);
    out_data_dest_V_1_sel <= out_data_dest_V_1_sel_rd;
    out_data_dest_V_1_state_cmp_full <= '0' when (out_data_dest_V_1_state = ap_const_lv2_1) else '1';

    out_data_dest_V_1_vld_in_assign_proc : process(out_data_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if (((out_data_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_data_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            out_data_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_data_dest_V_1_vld_out <= out_data_dest_V_1_state(0);
    out_data_id_V_1_ack_in <= out_data_id_V_1_state(1);
    out_data_id_V_1_ack_out <= out_data_TREADY;

    out_data_id_V_1_data_out_assign_proc : process(out_data_id_V_1_payload_A, out_data_id_V_1_payload_B, out_data_id_V_1_sel)
    begin
        if ((out_data_id_V_1_sel = ap_const_logic_1)) then 
            out_data_id_V_1_data_out <= out_data_id_V_1_payload_B;
        else 
            out_data_id_V_1_data_out <= out_data_id_V_1_payload_A;
        end if; 
    end process;

    out_data_id_V_1_load_A <= (out_data_id_V_1_state_cmp_full and not(out_data_id_V_1_sel_wr));
    out_data_id_V_1_load_B <= (out_data_id_V_1_state_cmp_full and out_data_id_V_1_sel_wr);
    out_data_id_V_1_sel <= out_data_id_V_1_sel_rd;
    out_data_id_V_1_state_cmp_full <= '0' when (out_data_id_V_1_state = ap_const_lv2_1) else '1';

    out_data_id_V_1_vld_in_assign_proc : process(out_data_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if (((out_data_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_data_id_V_1_vld_in <= ap_const_logic_1;
        else 
            out_data_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_data_id_V_1_vld_out <= out_data_id_V_1_state(0);
    out_data_keep_V_1_ack_in <= out_data_keep_V_1_state(1);
    out_data_keep_V_1_ack_out <= out_data_TREADY;

    out_data_keep_V_1_data_out_assign_proc : process(out_data_keep_V_1_payload_A, out_data_keep_V_1_payload_B, out_data_keep_V_1_sel)
    begin
        if ((out_data_keep_V_1_sel = ap_const_logic_1)) then 
            out_data_keep_V_1_data_out <= out_data_keep_V_1_payload_B;
        else 
            out_data_keep_V_1_data_out <= out_data_keep_V_1_payload_A;
        end if; 
    end process;

    out_data_keep_V_1_load_A <= (out_data_keep_V_1_state_cmp_full and not(out_data_keep_V_1_sel_wr));
    out_data_keep_V_1_load_B <= (out_data_keep_V_1_state_cmp_full and out_data_keep_V_1_sel_wr);
    out_data_keep_V_1_sel <= out_data_keep_V_1_sel_rd;
    out_data_keep_V_1_state_cmp_full <= '0' when (out_data_keep_V_1_state = ap_const_lv2_1) else '1';

    out_data_keep_V_1_vld_in_assign_proc : process(out_data_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if (((out_data_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_data_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            out_data_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_data_keep_V_1_vld_out <= out_data_keep_V_1_state(0);
    out_data_last_V_1_ack_in <= out_data_last_V_1_state(1);
    out_data_last_V_1_ack_out <= out_data_TREADY;

    out_data_last_V_1_data_out_assign_proc : process(out_data_last_V_1_payload_A, out_data_last_V_1_payload_B, out_data_last_V_1_sel)
    begin
        if ((out_data_last_V_1_sel = ap_const_logic_1)) then 
            out_data_last_V_1_data_out <= out_data_last_V_1_payload_B;
        else 
            out_data_last_V_1_data_out <= out_data_last_V_1_payload_A;
        end if; 
    end process;

    out_data_last_V_1_load_A <= (out_data_last_V_1_state_cmp_full and not(out_data_last_V_1_sel_wr));
    out_data_last_V_1_load_B <= (out_data_last_V_1_state_cmp_full and out_data_last_V_1_sel_wr);
    out_data_last_V_1_sel <= out_data_last_V_1_sel_rd;
    out_data_last_V_1_state_cmp_full <= '0' when (out_data_last_V_1_state = ap_const_lv2_1) else '1';

    out_data_last_V_1_vld_in_assign_proc : process(out_data_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if (((out_data_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_data_last_V_1_vld_in <= ap_const_logic_1;
        else 
            out_data_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_data_last_V_1_vld_out <= out_data_last_V_1_state(0);
    out_data_strb_V_1_ack_in <= out_data_strb_V_1_state(1);
    out_data_strb_V_1_ack_out <= out_data_TREADY;

    out_data_strb_V_1_data_out_assign_proc : process(out_data_strb_V_1_payload_A, out_data_strb_V_1_payload_B, out_data_strb_V_1_sel)
    begin
        if ((out_data_strb_V_1_sel = ap_const_logic_1)) then 
            out_data_strb_V_1_data_out <= out_data_strb_V_1_payload_B;
        else 
            out_data_strb_V_1_data_out <= out_data_strb_V_1_payload_A;
        end if; 
    end process;

    out_data_strb_V_1_load_A <= (out_data_strb_V_1_state_cmp_full and not(out_data_strb_V_1_sel_wr));
    out_data_strb_V_1_load_B <= (out_data_strb_V_1_state_cmp_full and out_data_strb_V_1_sel_wr);
    out_data_strb_V_1_sel <= out_data_strb_V_1_sel_rd;
    out_data_strb_V_1_state_cmp_full <= '0' when (out_data_strb_V_1_state = ap_const_lv2_1) else '1';

    out_data_strb_V_1_vld_in_assign_proc : process(out_data_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if (((out_data_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_data_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            out_data_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_data_strb_V_1_vld_out <= out_data_strb_V_1_state(0);
    out_data_user_V_1_ack_in <= out_data_user_V_1_state(1);
    out_data_user_V_1_ack_out <= out_data_TREADY;

    out_data_user_V_1_data_out_assign_proc : process(out_data_user_V_1_payload_A, out_data_user_V_1_payload_B, out_data_user_V_1_sel)
    begin
        if ((out_data_user_V_1_sel = ap_const_logic_1)) then 
            out_data_user_V_1_data_out <= out_data_user_V_1_payload_B;
        else 
            out_data_user_V_1_data_out <= out_data_user_V_1_payload_A;
        end if; 
    end process;

    out_data_user_V_1_load_A <= (out_data_user_V_1_state_cmp_full and not(out_data_user_V_1_sel_wr));
    out_data_user_V_1_load_B <= (out_data_user_V_1_state_cmp_full and out_data_user_V_1_sel_wr);
    out_data_user_V_1_sel <= out_data_user_V_1_sel_rd;
    out_data_user_V_1_state_cmp_full <= '0' when (out_data_user_V_1_state = ap_const_lv2_1) else '1';

    out_data_user_V_1_vld_in_assign_proc : process(out_data_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if (((out_data_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_data_user_V_1_vld_in <= ap_const_logic_1;
        else 
            out_data_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_data_user_V_1_vld_out <= out_data_user_V_1_state(0);
end behav;

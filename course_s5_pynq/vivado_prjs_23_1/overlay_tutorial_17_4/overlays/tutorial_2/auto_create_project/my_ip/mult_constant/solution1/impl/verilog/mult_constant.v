// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mult_constant,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=412,HLS_SYN_LUT=849}" *)

module mult_constant (
        ap_clk,
        ap_rst_n,
        in_data_TDATA,
        in_data_TVALID,
        in_data_TREADY,
        in_data_TKEEP,
        in_data_TSTRB,
        in_data_TUSER,
        in_data_TLAST,
        in_data_TID,
        in_data_TDEST,
        out_data_TDATA,
        out_data_TVALID,
        out_data_TREADY,
        out_data_TKEEP,
        out_data_TSTRB,
        out_data_TUSER,
        out_data_TLAST,
        out_data_TID,
        out_data_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_data_TDATA;
input   in_data_TVALID;
output   in_data_TREADY;
input  [3:0] in_data_TKEEP;
input  [3:0] in_data_TSTRB;
input  [0:0] in_data_TUSER;
input  [0:0] in_data_TLAST;
input  [0:0] in_data_TID;
input  [0:0] in_data_TDEST;
output  [31:0] out_data_TDATA;
output   out_data_TVALID;
input   out_data_TREADY;
output  [3:0] out_data_TKEEP;
output  [3:0] out_data_TSTRB;
output  [0:0] out_data_TUSER;
output  [0:0] out_data_TLAST;
output  [0:0] out_data_TID;
output  [0:0] out_data_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg    ap_rst_n_inv;
reg   [31:0] in_data_data_V_0_data_out;
wire    in_data_data_V_0_vld_in;
wire    in_data_data_V_0_vld_out;
wire    in_data_data_V_0_ack_in;
reg    in_data_data_V_0_ack_out;
reg   [31:0] in_data_data_V_0_payload_A;
reg   [31:0] in_data_data_V_0_payload_B;
reg    in_data_data_V_0_sel_rd;
reg    in_data_data_V_0_sel_wr;
wire    in_data_data_V_0_sel;
wire    in_data_data_V_0_load_A;
wire    in_data_data_V_0_load_B;
reg   [1:0] in_data_data_V_0_state;
wire    in_data_data_V_0_state_cmp_full;
reg   [3:0] in_data_keep_V_0_data_out;
wire    in_data_keep_V_0_vld_in;
wire    in_data_keep_V_0_vld_out;
wire    in_data_keep_V_0_ack_in;
reg    in_data_keep_V_0_ack_out;
reg   [3:0] in_data_keep_V_0_payload_A;
reg   [3:0] in_data_keep_V_0_payload_B;
reg    in_data_keep_V_0_sel_rd;
reg    in_data_keep_V_0_sel_wr;
wire    in_data_keep_V_0_sel;
wire    in_data_keep_V_0_load_A;
wire    in_data_keep_V_0_load_B;
reg   [1:0] in_data_keep_V_0_state;
wire    in_data_keep_V_0_state_cmp_full;
reg   [3:0] in_data_strb_V_0_data_out;
wire    in_data_strb_V_0_vld_in;
wire    in_data_strb_V_0_vld_out;
wire    in_data_strb_V_0_ack_in;
reg    in_data_strb_V_0_ack_out;
reg   [3:0] in_data_strb_V_0_payload_A;
reg   [3:0] in_data_strb_V_0_payload_B;
reg    in_data_strb_V_0_sel_rd;
reg    in_data_strb_V_0_sel_wr;
wire    in_data_strb_V_0_sel;
wire    in_data_strb_V_0_load_A;
wire    in_data_strb_V_0_load_B;
reg   [1:0] in_data_strb_V_0_state;
wire    in_data_strb_V_0_state_cmp_full;
reg   [0:0] in_data_user_V_0_data_out;
wire    in_data_user_V_0_vld_in;
wire    in_data_user_V_0_vld_out;
wire    in_data_user_V_0_ack_in;
reg    in_data_user_V_0_ack_out;
reg   [0:0] in_data_user_V_0_payload_A;
reg   [0:0] in_data_user_V_0_payload_B;
reg    in_data_user_V_0_sel_rd;
reg    in_data_user_V_0_sel_wr;
wire    in_data_user_V_0_sel;
wire    in_data_user_V_0_load_A;
wire    in_data_user_V_0_load_B;
reg   [1:0] in_data_user_V_0_state;
wire    in_data_user_V_0_state_cmp_full;
reg   [0:0] in_data_last_V_0_data_out;
wire    in_data_last_V_0_vld_in;
wire    in_data_last_V_0_vld_out;
wire    in_data_last_V_0_ack_in;
reg    in_data_last_V_0_ack_out;
reg   [0:0] in_data_last_V_0_payload_A;
reg   [0:0] in_data_last_V_0_payload_B;
reg    in_data_last_V_0_sel_rd;
reg    in_data_last_V_0_sel_wr;
wire    in_data_last_V_0_sel;
wire    in_data_last_V_0_load_A;
wire    in_data_last_V_0_load_B;
reg   [1:0] in_data_last_V_0_state;
wire    in_data_last_V_0_state_cmp_full;
reg   [0:0] in_data_id_V_0_data_out;
wire    in_data_id_V_0_vld_in;
wire    in_data_id_V_0_vld_out;
wire    in_data_id_V_0_ack_in;
reg    in_data_id_V_0_ack_out;
reg   [0:0] in_data_id_V_0_payload_A;
reg   [0:0] in_data_id_V_0_payload_B;
reg    in_data_id_V_0_sel_rd;
reg    in_data_id_V_0_sel_wr;
wire    in_data_id_V_0_sel;
wire    in_data_id_V_0_load_A;
wire    in_data_id_V_0_load_B;
reg   [1:0] in_data_id_V_0_state;
wire    in_data_id_V_0_state_cmp_full;
reg   [0:0] in_data_dest_V_0_data_out;
wire    in_data_dest_V_0_vld_in;
wire    in_data_dest_V_0_vld_out;
wire    in_data_dest_V_0_ack_in;
reg    in_data_dest_V_0_ack_out;
reg   [0:0] in_data_dest_V_0_payload_A;
reg   [0:0] in_data_dest_V_0_payload_B;
reg    in_data_dest_V_0_sel_rd;
reg    in_data_dest_V_0_sel_wr;
wire    in_data_dest_V_0_sel;
wire    in_data_dest_V_0_load_A;
wire    in_data_dest_V_0_load_B;
reg   [1:0] in_data_dest_V_0_state;
wire    in_data_dest_V_0_state_cmp_full;
reg   [31:0] out_data_data_V_1_data_out;
reg    out_data_data_V_1_vld_in;
wire    out_data_data_V_1_vld_out;
wire    out_data_data_V_1_ack_in;
wire    out_data_data_V_1_ack_out;
reg   [31:0] out_data_data_V_1_payload_A;
reg   [31:0] out_data_data_V_1_payload_B;
reg    out_data_data_V_1_sel_rd;
reg    out_data_data_V_1_sel_wr;
wire    out_data_data_V_1_sel;
wire    out_data_data_V_1_load_A;
wire    out_data_data_V_1_load_B;
reg   [1:0] out_data_data_V_1_state;
wire    out_data_data_V_1_state_cmp_full;
reg   [3:0] out_data_keep_V_1_data_out;
reg    out_data_keep_V_1_vld_in;
wire    out_data_keep_V_1_vld_out;
wire    out_data_keep_V_1_ack_in;
wire    out_data_keep_V_1_ack_out;
reg   [3:0] out_data_keep_V_1_payload_A;
reg   [3:0] out_data_keep_V_1_payload_B;
reg    out_data_keep_V_1_sel_rd;
reg    out_data_keep_V_1_sel_wr;
wire    out_data_keep_V_1_sel;
wire    out_data_keep_V_1_load_A;
wire    out_data_keep_V_1_load_B;
reg   [1:0] out_data_keep_V_1_state;
wire    out_data_keep_V_1_state_cmp_full;
reg   [3:0] out_data_strb_V_1_data_out;
reg    out_data_strb_V_1_vld_in;
wire    out_data_strb_V_1_vld_out;
wire    out_data_strb_V_1_ack_in;
wire    out_data_strb_V_1_ack_out;
reg   [3:0] out_data_strb_V_1_payload_A;
reg   [3:0] out_data_strb_V_1_payload_B;
reg    out_data_strb_V_1_sel_rd;
reg    out_data_strb_V_1_sel_wr;
wire    out_data_strb_V_1_sel;
wire    out_data_strb_V_1_load_A;
wire    out_data_strb_V_1_load_B;
reg   [1:0] out_data_strb_V_1_state;
wire    out_data_strb_V_1_state_cmp_full;
reg   [0:0] out_data_user_V_1_data_out;
reg    out_data_user_V_1_vld_in;
wire    out_data_user_V_1_vld_out;
wire    out_data_user_V_1_ack_in;
wire    out_data_user_V_1_ack_out;
reg   [0:0] out_data_user_V_1_payload_A;
reg   [0:0] out_data_user_V_1_payload_B;
reg    out_data_user_V_1_sel_rd;
reg    out_data_user_V_1_sel_wr;
wire    out_data_user_V_1_sel;
wire    out_data_user_V_1_load_A;
wire    out_data_user_V_1_load_B;
reg   [1:0] out_data_user_V_1_state;
wire    out_data_user_V_1_state_cmp_full;
reg   [0:0] out_data_last_V_1_data_out;
reg    out_data_last_V_1_vld_in;
wire    out_data_last_V_1_vld_out;
wire    out_data_last_V_1_ack_in;
wire    out_data_last_V_1_ack_out;
reg   [0:0] out_data_last_V_1_payload_A;
reg   [0:0] out_data_last_V_1_payload_B;
reg    out_data_last_V_1_sel_rd;
reg    out_data_last_V_1_sel_wr;
wire    out_data_last_V_1_sel;
wire    out_data_last_V_1_load_A;
wire    out_data_last_V_1_load_B;
reg   [1:0] out_data_last_V_1_state;
wire    out_data_last_V_1_state_cmp_full;
reg   [0:0] out_data_id_V_1_data_out;
reg    out_data_id_V_1_vld_in;
wire    out_data_id_V_1_vld_out;
wire    out_data_id_V_1_ack_in;
wire    out_data_id_V_1_ack_out;
reg   [0:0] out_data_id_V_1_payload_A;
reg   [0:0] out_data_id_V_1_payload_B;
reg    out_data_id_V_1_sel_rd;
reg    out_data_id_V_1_sel_wr;
wire    out_data_id_V_1_sel;
wire    out_data_id_V_1_load_A;
wire    out_data_id_V_1_load_B;
reg   [1:0] out_data_id_V_1_state;
wire    out_data_id_V_1_state_cmp_full;
reg   [0:0] out_data_dest_V_1_data_out;
reg    out_data_dest_V_1_vld_in;
wire    out_data_dest_V_1_vld_out;
wire    out_data_dest_V_1_ack_in;
wire    out_data_dest_V_1_ack_out;
reg   [0:0] out_data_dest_V_1_payload_A;
reg   [0:0] out_data_dest_V_1_payload_B;
reg    out_data_dest_V_1_sel_rd;
reg    out_data_dest_V_1_sel_wr;
wire    out_data_dest_V_1_sel;
wire    out_data_dest_V_1_load_A;
wire    out_data_dest_V_1_load_B;
reg   [1:0] out_data_dest_V_1_state;
wire    out_data_dest_V_1_state_cmp_full;
wire   [31:0] constant_V;
reg   [31:0] constant_V_0_data_reg;
reg    constant_V_0_vld_reg;
reg    constant_V_0_ack_out;
reg    in_data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    out_data_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg  signed [31:0] constant_V_read_reg_140;
reg  signed [31:0] in_data_data_V_tmp_reg_145;
reg   [3:0] in_data_keep_V_tmp_reg_150;
reg   [3:0] in_data_strb_V_tmp_reg_155;
reg   [0:0] in_data_user_V_tmp_reg_160;
reg   [0:0] in_data_last_V_tmp_reg_165;
reg   [0:0] in_data_id_V_tmp_reg_170;
reg   [0:0] in_data_dest_V_tmp_reg_175;
wire   [31:0] out_data_data_V_tmp_fu_135_p2;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 in_data_data_V_0_sel_rd = 1'b0;
#0 in_data_data_V_0_sel_wr = 1'b0;
#0 in_data_data_V_0_state = 2'd0;
#0 in_data_keep_V_0_sel_rd = 1'b0;
#0 in_data_keep_V_0_sel_wr = 1'b0;
#0 in_data_keep_V_0_state = 2'd0;
#0 in_data_strb_V_0_sel_rd = 1'b0;
#0 in_data_strb_V_0_sel_wr = 1'b0;
#0 in_data_strb_V_0_state = 2'd0;
#0 in_data_user_V_0_sel_rd = 1'b0;
#0 in_data_user_V_0_sel_wr = 1'b0;
#0 in_data_user_V_0_state = 2'd0;
#0 in_data_last_V_0_sel_rd = 1'b0;
#0 in_data_last_V_0_sel_wr = 1'b0;
#0 in_data_last_V_0_state = 2'd0;
#0 in_data_id_V_0_sel_rd = 1'b0;
#0 in_data_id_V_0_sel_wr = 1'b0;
#0 in_data_id_V_0_state = 2'd0;
#0 in_data_dest_V_0_sel_rd = 1'b0;
#0 in_data_dest_V_0_sel_wr = 1'b0;
#0 in_data_dest_V_0_state = 2'd0;
#0 out_data_data_V_1_sel_rd = 1'b0;
#0 out_data_data_V_1_sel_wr = 1'b0;
#0 out_data_data_V_1_state = 2'd0;
#0 out_data_keep_V_1_sel_rd = 1'b0;
#0 out_data_keep_V_1_sel_wr = 1'b0;
#0 out_data_keep_V_1_state = 2'd0;
#0 out_data_strb_V_1_sel_rd = 1'b0;
#0 out_data_strb_V_1_sel_wr = 1'b0;
#0 out_data_strb_V_1_state = 2'd0;
#0 out_data_user_V_1_sel_rd = 1'b0;
#0 out_data_user_V_1_sel_wr = 1'b0;
#0 out_data_user_V_1_state = 2'd0;
#0 out_data_last_V_1_sel_rd = 1'b0;
#0 out_data_last_V_1_sel_wr = 1'b0;
#0 out_data_last_V_1_state = 2'd0;
#0 out_data_id_V_1_sel_rd = 1'b0;
#0 out_data_id_V_1_sel_wr = 1'b0;
#0 out_data_id_V_1_state = 2'd0;
#0 out_data_dest_V_1_sel_rd = 1'b0;
#0 out_data_dest_V_1_sel_wr = 1'b0;
#0 out_data_dest_V_1_state = 2'd0;
#0 constant_V_0_data_reg = 32'd0;
#0 constant_V_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

mult_constant_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
mult_constant_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .constant_V(constant_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_data_V_0_ack_out == 1'b1) & (in_data_data_V_0_vld_out == 1'b1))) begin
            in_data_data_V_0_sel_rd <= ~in_data_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_data_V_0_ack_in == 1'b1) & (in_data_data_V_0_vld_in == 1'b1))) begin
            in_data_data_V_0_sel_wr <= ~in_data_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_data_V_0_vld_in == 1'b0) & (in_data_data_V_0_state == 2'd2)) | ((in_data_data_V_0_vld_in == 1'b0) & (in_data_data_V_0_state == 2'd3) & (in_data_data_V_0_ack_out == 1'b1)))) begin
            in_data_data_V_0_state <= 2'd2;
        end else if ((((in_data_data_V_0_ack_out == 1'b0) & (in_data_data_V_0_state == 2'd1)) | ((in_data_data_V_0_ack_out == 1'b0) & (in_data_data_V_0_state == 2'd3) & (in_data_data_V_0_vld_in == 1'b1)))) begin
            in_data_data_V_0_state <= 2'd1;
        end else if (((~((in_data_data_V_0_vld_in == 1'b0) & (in_data_data_V_0_ack_out == 1'b1)) & ~((in_data_data_V_0_ack_out == 1'b0) & (in_data_data_V_0_vld_in == 1'b1)) & (in_data_data_V_0_state == 2'd3)) | ((in_data_data_V_0_state == 2'd1) & (in_data_data_V_0_ack_out == 1'b1)) | ((in_data_data_V_0_state == 2'd2) & (in_data_data_V_0_vld_in == 1'b1)))) begin
            in_data_data_V_0_state <= 2'd3;
        end else begin
            in_data_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_dest_V_0_ack_out == 1'b1) & (in_data_dest_V_0_vld_out == 1'b1))) begin
            in_data_dest_V_0_sel_rd <= ~in_data_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_dest_V_0_ack_in == 1'b1) & (in_data_dest_V_0_vld_in == 1'b1))) begin
            in_data_dest_V_0_sel_wr <= ~in_data_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_dest_V_0_state == 2'd2) & (in_data_dest_V_0_vld_in == 1'b0)) | ((in_data_dest_V_0_state == 2'd3) & (in_data_dest_V_0_vld_in == 1'b0) & (in_data_dest_V_0_ack_out == 1'b1)))) begin
            in_data_dest_V_0_state <= 2'd2;
        end else if ((((in_data_dest_V_0_state == 2'd1) & (in_data_dest_V_0_ack_out == 1'b0)) | ((in_data_dest_V_0_state == 2'd3) & (in_data_dest_V_0_ack_out == 1'b0) & (in_data_dest_V_0_vld_in == 1'b1)))) begin
            in_data_dest_V_0_state <= 2'd1;
        end else if (((~((in_data_dest_V_0_vld_in == 1'b0) & (in_data_dest_V_0_ack_out == 1'b1)) & ~((in_data_dest_V_0_ack_out == 1'b0) & (in_data_dest_V_0_vld_in == 1'b1)) & (in_data_dest_V_0_state == 2'd3)) | ((in_data_dest_V_0_state == 2'd1) & (in_data_dest_V_0_ack_out == 1'b1)) | ((in_data_dest_V_0_state == 2'd2) & (in_data_dest_V_0_vld_in == 1'b1)))) begin
            in_data_dest_V_0_state <= 2'd3;
        end else begin
            in_data_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_id_V_0_ack_out == 1'b1) & (in_data_id_V_0_vld_out == 1'b1))) begin
            in_data_id_V_0_sel_rd <= ~in_data_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_id_V_0_ack_in == 1'b1) & (in_data_id_V_0_vld_in == 1'b1))) begin
            in_data_id_V_0_sel_wr <= ~in_data_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_id_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_id_V_0_state == 2'd2) & (in_data_id_V_0_vld_in == 1'b0)) | ((in_data_id_V_0_state == 2'd3) & (in_data_id_V_0_vld_in == 1'b0) & (in_data_id_V_0_ack_out == 1'b1)))) begin
            in_data_id_V_0_state <= 2'd2;
        end else if ((((in_data_id_V_0_state == 2'd1) & (in_data_id_V_0_ack_out == 1'b0)) | ((in_data_id_V_0_state == 2'd3) & (in_data_id_V_0_ack_out == 1'b0) & (in_data_id_V_0_vld_in == 1'b1)))) begin
            in_data_id_V_0_state <= 2'd1;
        end else if (((~((in_data_id_V_0_vld_in == 1'b0) & (in_data_id_V_0_ack_out == 1'b1)) & ~((in_data_id_V_0_ack_out == 1'b0) & (in_data_id_V_0_vld_in == 1'b1)) & (in_data_id_V_0_state == 2'd3)) | ((in_data_id_V_0_state == 2'd1) & (in_data_id_V_0_ack_out == 1'b1)) | ((in_data_id_V_0_state == 2'd2) & (in_data_id_V_0_vld_in == 1'b1)))) begin
            in_data_id_V_0_state <= 2'd3;
        end else begin
            in_data_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_keep_V_0_ack_out == 1'b1) & (in_data_keep_V_0_vld_out == 1'b1))) begin
            in_data_keep_V_0_sel_rd <= ~in_data_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_keep_V_0_ack_in == 1'b1) & (in_data_keep_V_0_vld_in == 1'b1))) begin
            in_data_keep_V_0_sel_wr <= ~in_data_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_keep_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_keep_V_0_state == 2'd2) & (in_data_keep_V_0_vld_in == 1'b0)) | ((in_data_keep_V_0_state == 2'd3) & (in_data_keep_V_0_vld_in == 1'b0) & (in_data_keep_V_0_ack_out == 1'b1)))) begin
            in_data_keep_V_0_state <= 2'd2;
        end else if ((((in_data_keep_V_0_state == 2'd3) & (in_data_keep_V_0_ack_out == 1'b0) & (in_data_keep_V_0_vld_in == 1'b1)) | ((in_data_keep_V_0_state == 2'd1) & (in_data_keep_V_0_ack_out == 1'b0)))) begin
            in_data_keep_V_0_state <= 2'd1;
        end else if ((((in_data_keep_V_0_state == 2'd2) & (in_data_keep_V_0_vld_in == 1'b1)) | (~((in_data_keep_V_0_vld_in == 1'b0) & (in_data_keep_V_0_ack_out == 1'b1)) & ~((in_data_keep_V_0_ack_out == 1'b0) & (in_data_keep_V_0_vld_in == 1'b1)) & (in_data_keep_V_0_state == 2'd3)) | ((in_data_keep_V_0_state == 2'd1) & (in_data_keep_V_0_ack_out == 1'b1)))) begin
            in_data_keep_V_0_state <= 2'd3;
        end else begin
            in_data_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_last_V_0_ack_out == 1'b1) & (in_data_last_V_0_vld_out == 1'b1))) begin
            in_data_last_V_0_sel_rd <= ~in_data_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_last_V_0_ack_in == 1'b1) & (in_data_last_V_0_vld_in == 1'b1))) begin
            in_data_last_V_0_sel_wr <= ~in_data_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_last_V_0_state == 2'd2) & (in_data_last_V_0_vld_in == 1'b0)) | ((in_data_last_V_0_state == 2'd3) & (in_data_last_V_0_vld_in == 1'b0) & (in_data_last_V_0_ack_out == 1'b1)))) begin
            in_data_last_V_0_state <= 2'd2;
        end else if ((((in_data_last_V_0_state == 2'd1) & (in_data_last_V_0_ack_out == 1'b0)) | ((in_data_last_V_0_state == 2'd3) & (in_data_last_V_0_ack_out == 1'b0) & (in_data_last_V_0_vld_in == 1'b1)))) begin
            in_data_last_V_0_state <= 2'd1;
        end else if (((~((in_data_last_V_0_vld_in == 1'b0) & (in_data_last_V_0_ack_out == 1'b1)) & ~((in_data_last_V_0_ack_out == 1'b0) & (in_data_last_V_0_vld_in == 1'b1)) & (in_data_last_V_0_state == 2'd3)) | ((in_data_last_V_0_state == 2'd1) & (in_data_last_V_0_ack_out == 1'b1)) | ((in_data_last_V_0_state == 2'd2) & (in_data_last_V_0_vld_in == 1'b1)))) begin
            in_data_last_V_0_state <= 2'd3;
        end else begin
            in_data_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_strb_V_0_ack_out == 1'b1) & (in_data_strb_V_0_vld_out == 1'b1))) begin
            in_data_strb_V_0_sel_rd <= ~in_data_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_strb_V_0_ack_in == 1'b1) & (in_data_strb_V_0_vld_in == 1'b1))) begin
            in_data_strb_V_0_sel_wr <= ~in_data_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_strb_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_strb_V_0_state == 2'd2) & (in_data_strb_V_0_vld_in == 1'b0)) | ((in_data_strb_V_0_state == 2'd3) & (in_data_strb_V_0_vld_in == 1'b0) & (in_data_strb_V_0_ack_out == 1'b1)))) begin
            in_data_strb_V_0_state <= 2'd2;
        end else if ((((in_data_strb_V_0_state == 2'd1) & (in_data_strb_V_0_ack_out == 1'b0)) | ((in_data_strb_V_0_state == 2'd3) & (in_data_strb_V_0_ack_out == 1'b0) & (in_data_strb_V_0_vld_in == 1'b1)))) begin
            in_data_strb_V_0_state <= 2'd1;
        end else if (((~((in_data_strb_V_0_vld_in == 1'b0) & (in_data_strb_V_0_ack_out == 1'b1)) & ~((in_data_strb_V_0_ack_out == 1'b0) & (in_data_strb_V_0_vld_in == 1'b1)) & (in_data_strb_V_0_state == 2'd3)) | ((in_data_strb_V_0_state == 2'd1) & (in_data_strb_V_0_ack_out == 1'b1)) | ((in_data_strb_V_0_state == 2'd2) & (in_data_strb_V_0_vld_in == 1'b1)))) begin
            in_data_strb_V_0_state <= 2'd3;
        end else begin
            in_data_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_data_user_V_0_ack_out == 1'b1) & (in_data_user_V_0_vld_out == 1'b1))) begin
            in_data_user_V_0_sel_rd <= ~in_data_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_data_user_V_0_ack_in == 1'b1) & (in_data_user_V_0_vld_in == 1'b1))) begin
            in_data_user_V_0_sel_wr <= ~in_data_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_data_user_V_0_state <= 2'd0;
    end else begin
        if ((((in_data_user_V_0_state == 2'd2) & (in_data_user_V_0_vld_in == 1'b0)) | ((in_data_user_V_0_state == 2'd3) & (in_data_user_V_0_vld_in == 1'b0) & (in_data_user_V_0_ack_out == 1'b1)))) begin
            in_data_user_V_0_state <= 2'd2;
        end else if ((((in_data_user_V_0_state == 2'd1) & (in_data_user_V_0_ack_out == 1'b0)) | ((in_data_user_V_0_state == 2'd3) & (in_data_user_V_0_ack_out == 1'b0) & (in_data_user_V_0_vld_in == 1'b1)))) begin
            in_data_user_V_0_state <= 2'd1;
        end else if (((~((in_data_user_V_0_vld_in == 1'b0) & (in_data_user_V_0_ack_out == 1'b1)) & ~((in_data_user_V_0_ack_out == 1'b0) & (in_data_user_V_0_vld_in == 1'b1)) & (in_data_user_V_0_state == 2'd3)) | ((in_data_user_V_0_state == 2'd1) & (in_data_user_V_0_ack_out == 1'b1)) | ((in_data_user_V_0_state == 2'd2) & (in_data_user_V_0_vld_in == 1'b1)))) begin
            in_data_user_V_0_state <= 2'd3;
        end else begin
            in_data_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_data_V_1_ack_out == 1'b1) & (out_data_data_V_1_vld_out == 1'b1))) begin
            out_data_data_V_1_sel_rd <= ~out_data_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_data_V_1_ack_in == 1'b1) & (out_data_data_V_1_vld_in == 1'b1))) begin
            out_data_data_V_1_sel_wr <= ~out_data_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_data_V_1_state == 2'd2) & (out_data_data_V_1_vld_in == 1'b0)) | ((out_data_data_V_1_state == 2'd3) & (out_data_data_V_1_vld_in == 1'b0) & (out_data_data_V_1_ack_out == 1'b1)))) begin
            out_data_data_V_1_state <= 2'd2;
        end else if ((((out_data_data_V_1_state == 2'd1) & (out_data_data_V_1_ack_out == 1'b0)) | ((out_data_data_V_1_state == 2'd3) & (out_data_data_V_1_ack_out == 1'b0) & (out_data_data_V_1_vld_in == 1'b1)))) begin
            out_data_data_V_1_state <= 2'd1;
        end else if (((~((out_data_data_V_1_vld_in == 1'b0) & (out_data_data_V_1_ack_out == 1'b1)) & ~((out_data_data_V_1_ack_out == 1'b0) & (out_data_data_V_1_vld_in == 1'b1)) & (out_data_data_V_1_state == 2'd3)) | ((out_data_data_V_1_state == 2'd1) & (out_data_data_V_1_ack_out == 1'b1)) | ((out_data_data_V_1_state == 2'd2) & (out_data_data_V_1_vld_in == 1'b1)))) begin
            out_data_data_V_1_state <= 2'd3;
        end else begin
            out_data_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_dest_V_1_ack_out == 1'b1) & (out_data_dest_V_1_vld_out == 1'b1))) begin
            out_data_dest_V_1_sel_rd <= ~out_data_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_dest_V_1_ack_in == 1'b1) & (out_data_dest_V_1_vld_in == 1'b1))) begin
            out_data_dest_V_1_sel_wr <= ~out_data_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_dest_V_1_state == 2'd2) & (out_data_dest_V_1_vld_in == 1'b0)) | ((out_data_dest_V_1_state == 2'd3) & (out_data_dest_V_1_vld_in == 1'b0) & (out_data_dest_V_1_ack_out == 1'b1)))) begin
            out_data_dest_V_1_state <= 2'd2;
        end else if ((((out_data_dest_V_1_state == 2'd1) & (out_data_dest_V_1_ack_out == 1'b0)) | ((out_data_dest_V_1_state == 2'd3) & (out_data_dest_V_1_ack_out == 1'b0) & (out_data_dest_V_1_vld_in == 1'b1)))) begin
            out_data_dest_V_1_state <= 2'd1;
        end else if (((~((out_data_dest_V_1_vld_in == 1'b0) & (out_data_dest_V_1_ack_out == 1'b1)) & ~((out_data_dest_V_1_ack_out == 1'b0) & (out_data_dest_V_1_vld_in == 1'b1)) & (out_data_dest_V_1_state == 2'd3)) | ((out_data_dest_V_1_state == 2'd1) & (out_data_dest_V_1_ack_out == 1'b1)) | ((out_data_dest_V_1_state == 2'd2) & (out_data_dest_V_1_vld_in == 1'b1)))) begin
            out_data_dest_V_1_state <= 2'd3;
        end else begin
            out_data_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_id_V_1_ack_out == 1'b1) & (out_data_id_V_1_vld_out == 1'b1))) begin
            out_data_id_V_1_sel_rd <= ~out_data_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_id_V_1_ack_in == 1'b1) & (out_data_id_V_1_vld_in == 1'b1))) begin
            out_data_id_V_1_sel_wr <= ~out_data_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_id_V_1_state == 2'd2) & (out_data_id_V_1_vld_in == 1'b0)) | ((out_data_id_V_1_state == 2'd3) & (out_data_id_V_1_vld_in == 1'b0) & (out_data_id_V_1_ack_out == 1'b1)))) begin
            out_data_id_V_1_state <= 2'd2;
        end else if ((((out_data_id_V_1_state == 2'd1) & (out_data_id_V_1_ack_out == 1'b0)) | ((out_data_id_V_1_state == 2'd3) & (out_data_id_V_1_ack_out == 1'b0) & (out_data_id_V_1_vld_in == 1'b1)))) begin
            out_data_id_V_1_state <= 2'd1;
        end else if (((~((out_data_id_V_1_vld_in == 1'b0) & (out_data_id_V_1_ack_out == 1'b1)) & ~((out_data_id_V_1_ack_out == 1'b0) & (out_data_id_V_1_vld_in == 1'b1)) & (out_data_id_V_1_state == 2'd3)) | ((out_data_id_V_1_state == 2'd1) & (out_data_id_V_1_ack_out == 1'b1)) | ((out_data_id_V_1_state == 2'd2) & (out_data_id_V_1_vld_in == 1'b1)))) begin
            out_data_id_V_1_state <= 2'd3;
        end else begin
            out_data_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_keep_V_1_ack_out == 1'b1) & (out_data_keep_V_1_vld_out == 1'b1))) begin
            out_data_keep_V_1_sel_rd <= ~out_data_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_keep_V_1_ack_in == 1'b1) & (out_data_keep_V_1_vld_in == 1'b1))) begin
            out_data_keep_V_1_sel_wr <= ~out_data_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_keep_V_1_state == 2'd2) & (out_data_keep_V_1_vld_in == 1'b0)) | ((out_data_keep_V_1_state == 2'd3) & (out_data_keep_V_1_vld_in == 1'b0) & (out_data_keep_V_1_ack_out == 1'b1)))) begin
            out_data_keep_V_1_state <= 2'd2;
        end else if ((((out_data_keep_V_1_state == 2'd1) & (out_data_keep_V_1_ack_out == 1'b0)) | ((out_data_keep_V_1_state == 2'd3) & (out_data_keep_V_1_ack_out == 1'b0) & (out_data_keep_V_1_vld_in == 1'b1)))) begin
            out_data_keep_V_1_state <= 2'd1;
        end else if (((~((out_data_keep_V_1_vld_in == 1'b0) & (out_data_keep_V_1_ack_out == 1'b1)) & ~((out_data_keep_V_1_ack_out == 1'b0) & (out_data_keep_V_1_vld_in == 1'b1)) & (out_data_keep_V_1_state == 2'd3)) | ((out_data_keep_V_1_state == 2'd1) & (out_data_keep_V_1_ack_out == 1'b1)) | ((out_data_keep_V_1_state == 2'd2) & (out_data_keep_V_1_vld_in == 1'b1)))) begin
            out_data_keep_V_1_state <= 2'd3;
        end else begin
            out_data_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_last_V_1_ack_out == 1'b1) & (out_data_last_V_1_vld_out == 1'b1))) begin
            out_data_last_V_1_sel_rd <= ~out_data_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_last_V_1_ack_in == 1'b1) & (out_data_last_V_1_vld_in == 1'b1))) begin
            out_data_last_V_1_sel_wr <= ~out_data_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_last_V_1_state == 2'd2) & (out_data_last_V_1_vld_in == 1'b0)) | ((out_data_last_V_1_state == 2'd3) & (out_data_last_V_1_vld_in == 1'b0) & (out_data_last_V_1_ack_out == 1'b1)))) begin
            out_data_last_V_1_state <= 2'd2;
        end else if ((((out_data_last_V_1_state == 2'd1) & (out_data_last_V_1_ack_out == 1'b0)) | ((out_data_last_V_1_state == 2'd3) & (out_data_last_V_1_ack_out == 1'b0) & (out_data_last_V_1_vld_in == 1'b1)))) begin
            out_data_last_V_1_state <= 2'd1;
        end else if (((~((out_data_last_V_1_vld_in == 1'b0) & (out_data_last_V_1_ack_out == 1'b1)) & ~((out_data_last_V_1_ack_out == 1'b0) & (out_data_last_V_1_vld_in == 1'b1)) & (out_data_last_V_1_state == 2'd3)) | ((out_data_last_V_1_state == 2'd1) & (out_data_last_V_1_ack_out == 1'b1)) | ((out_data_last_V_1_state == 2'd2) & (out_data_last_V_1_vld_in == 1'b1)))) begin
            out_data_last_V_1_state <= 2'd3;
        end else begin
            out_data_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_strb_V_1_ack_out == 1'b1) & (out_data_strb_V_1_vld_out == 1'b1))) begin
            out_data_strb_V_1_sel_rd <= ~out_data_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_strb_V_1_ack_in == 1'b1) & (out_data_strb_V_1_vld_in == 1'b1))) begin
            out_data_strb_V_1_sel_wr <= ~out_data_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_strb_V_1_state == 2'd2) & (out_data_strb_V_1_vld_in == 1'b0)) | ((out_data_strb_V_1_state == 2'd3) & (out_data_strb_V_1_vld_in == 1'b0) & (out_data_strb_V_1_ack_out == 1'b1)))) begin
            out_data_strb_V_1_state <= 2'd2;
        end else if ((((out_data_strb_V_1_state == 2'd1) & (out_data_strb_V_1_ack_out == 1'b0)) | ((out_data_strb_V_1_state == 2'd3) & (out_data_strb_V_1_ack_out == 1'b0) & (out_data_strb_V_1_vld_in == 1'b1)))) begin
            out_data_strb_V_1_state <= 2'd1;
        end else if (((~((out_data_strb_V_1_vld_in == 1'b0) & (out_data_strb_V_1_ack_out == 1'b1)) & ~((out_data_strb_V_1_ack_out == 1'b0) & (out_data_strb_V_1_vld_in == 1'b1)) & (out_data_strb_V_1_state == 2'd3)) | ((out_data_strb_V_1_state == 2'd1) & (out_data_strb_V_1_ack_out == 1'b1)) | ((out_data_strb_V_1_state == 2'd2) & (out_data_strb_V_1_vld_in == 1'b1)))) begin
            out_data_strb_V_1_state <= 2'd3;
        end else begin
            out_data_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_data_user_V_1_ack_out == 1'b1) & (out_data_user_V_1_vld_out == 1'b1))) begin
            out_data_user_V_1_sel_rd <= ~out_data_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_data_user_V_1_ack_in == 1'b1) & (out_data_user_V_1_vld_in == 1'b1))) begin
            out_data_user_V_1_sel_wr <= ~out_data_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_data_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_data_user_V_1_state == 2'd2) & (out_data_user_V_1_vld_in == 1'b0)) | ((out_data_user_V_1_state == 2'd3) & (out_data_user_V_1_vld_in == 1'b0) & (out_data_user_V_1_ack_out == 1'b1)))) begin
            out_data_user_V_1_state <= 2'd2;
        end else if ((((out_data_user_V_1_state == 2'd1) & (out_data_user_V_1_ack_out == 1'b0)) | ((out_data_user_V_1_state == 2'd3) & (out_data_user_V_1_ack_out == 1'b0) & (out_data_user_V_1_vld_in == 1'b1)))) begin
            out_data_user_V_1_state <= 2'd1;
        end else if (((~((out_data_user_V_1_vld_in == 1'b0) & (out_data_user_V_1_ack_out == 1'b1)) & ~((out_data_user_V_1_ack_out == 1'b0) & (out_data_user_V_1_vld_in == 1'b1)) & (out_data_user_V_1_state == 2'd3)) | ((out_data_user_V_1_state == 2'd1) & (out_data_user_V_1_ack_out == 1'b1)) | ((out_data_user_V_1_state == 2'd2) & (out_data_user_V_1_vld_in == 1'b1)))) begin
            out_data_user_V_1_state <= 2'd3;
        end else begin
            out_data_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((constant_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((constant_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (constant_V_0_vld_reg == 1'b1)))) begin
        constant_V_0_data_reg <= constant_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_data_data_V_0_vld_out == 1'b1))) begin
        constant_V_read_reg_140 <= constant_V_0_data_reg;
        in_data_data_V_tmp_reg_145 <= in_data_data_V_0_data_out;
        in_data_dest_V_tmp_reg_175 <= in_data_dest_V_0_data_out;
        in_data_id_V_tmp_reg_170 <= in_data_id_V_0_data_out;
        in_data_keep_V_tmp_reg_150 <= in_data_keep_V_0_data_out;
        in_data_last_V_tmp_reg_165 <= in_data_last_V_0_data_out;
        in_data_strb_V_tmp_reg_155 <= in_data_strb_V_0_data_out;
        in_data_user_V_tmp_reg_160 <= in_data_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_data_V_0_load_A == 1'b1)) begin
        in_data_data_V_0_payload_A <= in_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_data_V_0_load_B == 1'b1)) begin
        in_data_data_V_0_payload_B <= in_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_dest_V_0_load_A == 1'b1)) begin
        in_data_dest_V_0_payload_A <= in_data_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_dest_V_0_load_B == 1'b1)) begin
        in_data_dest_V_0_payload_B <= in_data_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_id_V_0_load_A == 1'b1)) begin
        in_data_id_V_0_payload_A <= in_data_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_id_V_0_load_B == 1'b1)) begin
        in_data_id_V_0_payload_B <= in_data_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_keep_V_0_load_A == 1'b1)) begin
        in_data_keep_V_0_payload_A <= in_data_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_keep_V_0_load_B == 1'b1)) begin
        in_data_keep_V_0_payload_B <= in_data_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_last_V_0_load_A == 1'b1)) begin
        in_data_last_V_0_payload_A <= in_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_last_V_0_load_B == 1'b1)) begin
        in_data_last_V_0_payload_B <= in_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_strb_V_0_load_A == 1'b1)) begin
        in_data_strb_V_0_payload_A <= in_data_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_strb_V_0_load_B == 1'b1)) begin
        in_data_strb_V_0_payload_B <= in_data_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_user_V_0_load_A == 1'b1)) begin
        in_data_user_V_0_payload_A <= in_data_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((in_data_user_V_0_load_B == 1'b1)) begin
        in_data_user_V_0_payload_B <= in_data_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_data_V_1_load_A == 1'b1)) begin
        out_data_data_V_1_payload_A <= out_data_data_V_tmp_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_data_V_1_load_B == 1'b1)) begin
        out_data_data_V_1_payload_B <= out_data_data_V_tmp_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_dest_V_1_load_A == 1'b1)) begin
        out_data_dest_V_1_payload_A <= in_data_dest_V_tmp_reg_175;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_dest_V_1_load_B == 1'b1)) begin
        out_data_dest_V_1_payload_B <= in_data_dest_V_tmp_reg_175;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_id_V_1_load_A == 1'b1)) begin
        out_data_id_V_1_payload_A <= in_data_id_V_tmp_reg_170;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_id_V_1_load_B == 1'b1)) begin
        out_data_id_V_1_payload_B <= in_data_id_V_tmp_reg_170;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_keep_V_1_load_A == 1'b1)) begin
        out_data_keep_V_1_payload_A <= in_data_keep_V_tmp_reg_150;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_keep_V_1_load_B == 1'b1)) begin
        out_data_keep_V_1_payload_B <= in_data_keep_V_tmp_reg_150;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_last_V_1_load_A == 1'b1)) begin
        out_data_last_V_1_payload_A <= in_data_last_V_tmp_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_last_V_1_load_B == 1'b1)) begin
        out_data_last_V_1_payload_B <= in_data_last_V_tmp_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_strb_V_1_load_A == 1'b1)) begin
        out_data_strb_V_1_payload_A <= in_data_strb_V_tmp_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_strb_V_1_load_B == 1'b1)) begin
        out_data_strb_V_1_payload_B <= in_data_strb_V_tmp_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_user_V_1_load_A == 1'b1)) begin
        out_data_user_V_1_payload_A <= in_data_user_V_tmp_reg_160;
    end
end

always @ (posedge ap_clk) begin
    if ((out_data_user_V_1_load_B == 1'b1)) begin
        out_data_user_V_1_payload_B <= in_data_user_V_tmp_reg_160;
    end
end

always @ (*) begin
    if ((~((out_data_dest_V_1_ack_in == 1'b0) | (out_data_id_V_1_ack_in == 1'b0) | (out_data_last_V_1_ack_in == 1'b0) | (out_data_user_V_1_ack_in == 1'b0) | (out_data_strb_V_1_ack_in == 1'b0) | (out_data_keep_V_1_ack_in == 1'b0) | (out_data_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        constant_V_0_ack_out = 1'b1;
    end else begin
        constant_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_data_TDATA_blk_n = in_data_data_V_0_state[1'd0];
    end else begin
        in_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_data_data_V_0_vld_out == 1'b1))) begin
        in_data_data_V_0_ack_out = 1'b1;
    end else begin
        in_data_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_data_V_0_sel == 1'b1)) begin
        in_data_data_V_0_data_out = in_data_data_V_0_payload_B;
    end else begin
        in_data_data_V_0_data_out = in_data_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_data_data_V_0_vld_out == 1'b1))) begin
        in_data_dest_V_0_ack_out = 1'b1;
    end else begin
        in_data_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_dest_V_0_sel == 1'b1)) begin
        in_data_dest_V_0_data_out = in_data_dest_V_0_payload_B;
    end else begin
        in_data_dest_V_0_data_out = in_data_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_data_data_V_0_vld_out == 1'b1))) begin
        in_data_id_V_0_ack_out = 1'b1;
    end else begin
        in_data_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_id_V_0_sel == 1'b1)) begin
        in_data_id_V_0_data_out = in_data_id_V_0_payload_B;
    end else begin
        in_data_id_V_0_data_out = in_data_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_data_data_V_0_vld_out == 1'b1))) begin
        in_data_keep_V_0_ack_out = 1'b1;
    end else begin
        in_data_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_keep_V_0_sel == 1'b1)) begin
        in_data_keep_V_0_data_out = in_data_keep_V_0_payload_B;
    end else begin
        in_data_keep_V_0_data_out = in_data_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_data_data_V_0_vld_out == 1'b1))) begin
        in_data_last_V_0_ack_out = 1'b1;
    end else begin
        in_data_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_last_V_0_sel == 1'b1)) begin
        in_data_last_V_0_data_out = in_data_last_V_0_payload_B;
    end else begin
        in_data_last_V_0_data_out = in_data_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_data_data_V_0_vld_out == 1'b1))) begin
        in_data_strb_V_0_ack_out = 1'b1;
    end else begin
        in_data_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_strb_V_0_sel == 1'b1)) begin
        in_data_strb_V_0_data_out = in_data_strb_V_0_payload_B;
    end else begin
        in_data_strb_V_0_data_out = in_data_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (in_data_data_V_0_vld_out == 1'b1))) begin
        in_data_user_V_0_ack_out = 1'b1;
    end else begin
        in_data_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_user_V_0_sel == 1'b1)) begin
        in_data_user_V_0_data_out = in_data_user_V_0_payload_B;
    end else begin
        in_data_user_V_0_data_out = in_data_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        out_data_TDATA_blk_n = out_data_data_V_1_state[1'd1];
    end else begin
        out_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_data_data_V_1_sel == 1'b1)) begin
        out_data_data_V_1_data_out = out_data_data_V_1_payload_B;
    end else begin
        out_data_data_V_1_data_out = out_data_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((out_data_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_data_data_V_1_vld_in = 1'b1;
    end else begin
        out_data_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_dest_V_1_sel == 1'b1)) begin
        out_data_dest_V_1_data_out = out_data_dest_V_1_payload_B;
    end else begin
        out_data_dest_V_1_data_out = out_data_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((out_data_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_data_dest_V_1_vld_in = 1'b1;
    end else begin
        out_data_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_id_V_1_sel == 1'b1)) begin
        out_data_id_V_1_data_out = out_data_id_V_1_payload_B;
    end else begin
        out_data_id_V_1_data_out = out_data_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((out_data_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_data_id_V_1_vld_in = 1'b1;
    end else begin
        out_data_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_keep_V_1_sel == 1'b1)) begin
        out_data_keep_V_1_data_out = out_data_keep_V_1_payload_B;
    end else begin
        out_data_keep_V_1_data_out = out_data_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((out_data_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_data_keep_V_1_vld_in = 1'b1;
    end else begin
        out_data_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_last_V_1_sel == 1'b1)) begin
        out_data_last_V_1_data_out = out_data_last_V_1_payload_B;
    end else begin
        out_data_last_V_1_data_out = out_data_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((out_data_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_data_last_V_1_vld_in = 1'b1;
    end else begin
        out_data_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_strb_V_1_sel == 1'b1)) begin
        out_data_strb_V_1_data_out = out_data_strb_V_1_payload_B;
    end else begin
        out_data_strb_V_1_data_out = out_data_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((out_data_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_data_strb_V_1_vld_in = 1'b1;
    end else begin
        out_data_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_user_V_1_sel == 1'b1)) begin
        out_data_user_V_1_data_out = out_data_user_V_1_payload_B;
    end else begin
        out_data_user_V_1_data_out = out_data_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((out_data_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_data_user_V_1_vld_in = 1'b1;
    end else begin
        out_data_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (in_data_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((out_data_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out_data_dest_V_1_ack_in == 1'b0) | (out_data_id_V_1_ack_in == 1'b0) | (out_data_last_V_1_ack_in == 1'b0) | (out_data_user_V_1_ack_in == 1'b0) | (out_data_strb_V_1_ack_in == 1'b0) | (out_data_keep_V_1_ack_in == 1'b0) | (out_data_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state4 = ((out_data_dest_V_1_ack_in == 1'b0) | (out_data_id_V_1_ack_in == 1'b0) | (out_data_last_V_1_ack_in == 1'b0) | (out_data_user_V_1_ack_in == 1'b0) | (out_data_strb_V_1_ack_in == 1'b0) | (out_data_keep_V_1_ack_in == 1'b0) | (out_data_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign in_data_TREADY = in_data_dest_V_0_state[1'd1];

assign in_data_data_V_0_ack_in = in_data_data_V_0_state[1'd1];

assign in_data_data_V_0_load_A = (in_data_data_V_0_state_cmp_full & ~in_data_data_V_0_sel_wr);

assign in_data_data_V_0_load_B = (in_data_data_V_0_state_cmp_full & in_data_data_V_0_sel_wr);

assign in_data_data_V_0_sel = in_data_data_V_0_sel_rd;

assign in_data_data_V_0_state_cmp_full = ((in_data_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_data_V_0_vld_in = in_data_TVALID;

assign in_data_data_V_0_vld_out = in_data_data_V_0_state[1'd0];

assign in_data_dest_V_0_ack_in = in_data_dest_V_0_state[1'd1];

assign in_data_dest_V_0_load_A = (in_data_dest_V_0_state_cmp_full & ~in_data_dest_V_0_sel_wr);

assign in_data_dest_V_0_load_B = (in_data_dest_V_0_state_cmp_full & in_data_dest_V_0_sel_wr);

assign in_data_dest_V_0_sel = in_data_dest_V_0_sel_rd;

assign in_data_dest_V_0_state_cmp_full = ((in_data_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_dest_V_0_vld_in = in_data_TVALID;

assign in_data_dest_V_0_vld_out = in_data_dest_V_0_state[1'd0];

assign in_data_id_V_0_ack_in = in_data_id_V_0_state[1'd1];

assign in_data_id_V_0_load_A = (in_data_id_V_0_state_cmp_full & ~in_data_id_V_0_sel_wr);

assign in_data_id_V_0_load_B = (in_data_id_V_0_state_cmp_full & in_data_id_V_0_sel_wr);

assign in_data_id_V_0_sel = in_data_id_V_0_sel_rd;

assign in_data_id_V_0_state_cmp_full = ((in_data_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_id_V_0_vld_in = in_data_TVALID;

assign in_data_id_V_0_vld_out = in_data_id_V_0_state[1'd0];

assign in_data_keep_V_0_ack_in = in_data_keep_V_0_state[1'd1];

assign in_data_keep_V_0_load_A = (in_data_keep_V_0_state_cmp_full & ~in_data_keep_V_0_sel_wr);

assign in_data_keep_V_0_load_B = (in_data_keep_V_0_state_cmp_full & in_data_keep_V_0_sel_wr);

assign in_data_keep_V_0_sel = in_data_keep_V_0_sel_rd;

assign in_data_keep_V_0_state_cmp_full = ((in_data_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_keep_V_0_vld_in = in_data_TVALID;

assign in_data_keep_V_0_vld_out = in_data_keep_V_0_state[1'd0];

assign in_data_last_V_0_ack_in = in_data_last_V_0_state[1'd1];

assign in_data_last_V_0_load_A = (in_data_last_V_0_state_cmp_full & ~in_data_last_V_0_sel_wr);

assign in_data_last_V_0_load_B = (in_data_last_V_0_state_cmp_full & in_data_last_V_0_sel_wr);

assign in_data_last_V_0_sel = in_data_last_V_0_sel_rd;

assign in_data_last_V_0_state_cmp_full = ((in_data_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_last_V_0_vld_in = in_data_TVALID;

assign in_data_last_V_0_vld_out = in_data_last_V_0_state[1'd0];

assign in_data_strb_V_0_ack_in = in_data_strb_V_0_state[1'd1];

assign in_data_strb_V_0_load_A = (in_data_strb_V_0_state_cmp_full & ~in_data_strb_V_0_sel_wr);

assign in_data_strb_V_0_load_B = (in_data_strb_V_0_state_cmp_full & in_data_strb_V_0_sel_wr);

assign in_data_strb_V_0_sel = in_data_strb_V_0_sel_rd;

assign in_data_strb_V_0_state_cmp_full = ((in_data_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_strb_V_0_vld_in = in_data_TVALID;

assign in_data_strb_V_0_vld_out = in_data_strb_V_0_state[1'd0];

assign in_data_user_V_0_ack_in = in_data_user_V_0_state[1'd1];

assign in_data_user_V_0_load_A = (in_data_user_V_0_state_cmp_full & ~in_data_user_V_0_sel_wr);

assign in_data_user_V_0_load_B = (in_data_user_V_0_state_cmp_full & in_data_user_V_0_sel_wr);

assign in_data_user_V_0_sel = in_data_user_V_0_sel_rd;

assign in_data_user_V_0_state_cmp_full = ((in_data_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_data_user_V_0_vld_in = in_data_TVALID;

assign in_data_user_V_0_vld_out = in_data_user_V_0_state[1'd0];

assign out_data_TDATA = out_data_data_V_1_data_out;

assign out_data_TDEST = out_data_dest_V_1_data_out;

assign out_data_TID = out_data_id_V_1_data_out;

assign out_data_TKEEP = out_data_keep_V_1_data_out;

assign out_data_TLAST = out_data_last_V_1_data_out;

assign out_data_TSTRB = out_data_strb_V_1_data_out;

assign out_data_TUSER = out_data_user_V_1_data_out;

assign out_data_TVALID = out_data_dest_V_1_state[1'd0];

assign out_data_data_V_1_ack_in = out_data_data_V_1_state[1'd1];

assign out_data_data_V_1_ack_out = out_data_TREADY;

assign out_data_data_V_1_load_A = (out_data_data_V_1_state_cmp_full & ~out_data_data_V_1_sel_wr);

assign out_data_data_V_1_load_B = (out_data_data_V_1_state_cmp_full & out_data_data_V_1_sel_wr);

assign out_data_data_V_1_sel = out_data_data_V_1_sel_rd;

assign out_data_data_V_1_state_cmp_full = ((out_data_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_data_V_1_vld_out = out_data_data_V_1_state[1'd0];

assign out_data_data_V_tmp_fu_135_p2 = ($signed(in_data_data_V_tmp_reg_145) * $signed(constant_V_read_reg_140));

assign out_data_dest_V_1_ack_in = out_data_dest_V_1_state[1'd1];

assign out_data_dest_V_1_ack_out = out_data_TREADY;

assign out_data_dest_V_1_load_A = (out_data_dest_V_1_state_cmp_full & ~out_data_dest_V_1_sel_wr);

assign out_data_dest_V_1_load_B = (out_data_dest_V_1_state_cmp_full & out_data_dest_V_1_sel_wr);

assign out_data_dest_V_1_sel = out_data_dest_V_1_sel_rd;

assign out_data_dest_V_1_state_cmp_full = ((out_data_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_dest_V_1_vld_out = out_data_dest_V_1_state[1'd0];

assign out_data_id_V_1_ack_in = out_data_id_V_1_state[1'd1];

assign out_data_id_V_1_ack_out = out_data_TREADY;

assign out_data_id_V_1_load_A = (out_data_id_V_1_state_cmp_full & ~out_data_id_V_1_sel_wr);

assign out_data_id_V_1_load_B = (out_data_id_V_1_state_cmp_full & out_data_id_V_1_sel_wr);

assign out_data_id_V_1_sel = out_data_id_V_1_sel_rd;

assign out_data_id_V_1_state_cmp_full = ((out_data_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_id_V_1_vld_out = out_data_id_V_1_state[1'd0];

assign out_data_keep_V_1_ack_in = out_data_keep_V_1_state[1'd1];

assign out_data_keep_V_1_ack_out = out_data_TREADY;

assign out_data_keep_V_1_load_A = (out_data_keep_V_1_state_cmp_full & ~out_data_keep_V_1_sel_wr);

assign out_data_keep_V_1_load_B = (out_data_keep_V_1_state_cmp_full & out_data_keep_V_1_sel_wr);

assign out_data_keep_V_1_sel = out_data_keep_V_1_sel_rd;

assign out_data_keep_V_1_state_cmp_full = ((out_data_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_keep_V_1_vld_out = out_data_keep_V_1_state[1'd0];

assign out_data_last_V_1_ack_in = out_data_last_V_1_state[1'd1];

assign out_data_last_V_1_ack_out = out_data_TREADY;

assign out_data_last_V_1_load_A = (out_data_last_V_1_state_cmp_full & ~out_data_last_V_1_sel_wr);

assign out_data_last_V_1_load_B = (out_data_last_V_1_state_cmp_full & out_data_last_V_1_sel_wr);

assign out_data_last_V_1_sel = out_data_last_V_1_sel_rd;

assign out_data_last_V_1_state_cmp_full = ((out_data_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_last_V_1_vld_out = out_data_last_V_1_state[1'd0];

assign out_data_strb_V_1_ack_in = out_data_strb_V_1_state[1'd1];

assign out_data_strb_V_1_ack_out = out_data_TREADY;

assign out_data_strb_V_1_load_A = (out_data_strb_V_1_state_cmp_full & ~out_data_strb_V_1_sel_wr);

assign out_data_strb_V_1_load_B = (out_data_strb_V_1_state_cmp_full & out_data_strb_V_1_sel_wr);

assign out_data_strb_V_1_sel = out_data_strb_V_1_sel_rd;

assign out_data_strb_V_1_state_cmp_full = ((out_data_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_strb_V_1_vld_out = out_data_strb_V_1_state[1'd0];

assign out_data_user_V_1_ack_in = out_data_user_V_1_state[1'd1];

assign out_data_user_V_1_ack_out = out_data_TREADY;

assign out_data_user_V_1_load_A = (out_data_user_V_1_state_cmp_full & ~out_data_user_V_1_sel_wr);

assign out_data_user_V_1_load_B = (out_data_user_V_1_state_cmp_full & out_data_user_V_1_sel_wr);

assign out_data_user_V_1_sel = out_data_user_V_1_sel_rd;

assign out_data_user_V_1_state_cmp_full = ((out_data_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_data_user_V_1_vld_out = out_data_user_V_1_state[1'd0];

endmodule //mult_constant
